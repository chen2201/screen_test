
TEST_SCREEN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049ac  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080089e0  080089e0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089e0  080089e0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080089e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000a0  08008a88  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08008a88  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad56  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0a  00000000  00000000  0002ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002cd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002d730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010119  00000000  00000000  0002dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098cb  00000000  00000000  0003e101  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000544a3  00000000  00000000  000479cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009be6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  0009beec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800401c 	.word	0x0800401c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	0800401c 	.word	0x0800401c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EPD_Init>:
#include <stdlib.h>
#include "epd2in7.h"

#include "epdif.h"

int EPD_Init(EPD* epd) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  epd->reset_pin = RST_PIN;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2201      	movs	r2, #1
 800022c:	601a      	str	r2, [r3, #0]
  epd->dc_pin = DC_PIN;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2202      	movs	r2, #2
 8000232:	605a      	str	r2, [r3, #4]
  epd->cs_pin = CS_PIN;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  epd->busy_pin = BUSY_PIN;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2203      	movs	r2, #3
 800023e:	60da      	str	r2, [r3, #12]
  epd->width = EPD_WIDTH;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	611a      	str	r2, [r3, #16]
  epd->height = EPD_HEIGHT;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2294      	movs	r2, #148	; 0x94
 800024a:	0052      	lsls	r2, r2, #1
 800024c:	615a      	str	r2, [r3, #20]
  
  /* this calls the peripheral hardware interface, see epdif */
  if (EpdInitCallback() != 0) {
 800024e:	f000 fae1 	bl	8000814 <EpdInitCallback>
 8000252:	1e03      	subs	r3, r0, #0
 8000254:	d002      	beq.n	800025c <EPD_Init+0x3c>
    return -1;
 8000256:	2301      	movs	r3, #1
 8000258:	425b      	negs	r3, r3
 800025a:	e0d9      	b.n	8000410 <EPD_Init+0x1f0>
  }
  
    /* EPD hardware init start */
    EPD_Reset(epd);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0018      	movs	r0, r3
 8000260:	f000 f94a 	bl	80004f8 <EPD_Reset>
    EPD_SendCommand(epd, POWER_SETTING);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 f900 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x03);                  // VDS_EN, VDG_EN
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2103      	movs	r1, #3
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f912 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x00);                  // VCOM_HV, VGHL_LV[1], VGHL_LV[0]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f000 f90d 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x2b);                  // VDH
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	212b      	movs	r1, #43	; 0x2b
 8000286:	0018      	movs	r0, r3
 8000288:	f000 f908 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x2b);                  // VDL
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	212b      	movs	r1, #43	; 0x2b
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f903 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x09);                  // VDHR
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2109      	movs	r1, #9
 800029a:	0018      	movs	r0, r3
 800029c:	f000 f8fe 	bl	800049c <EPD_SendData>
    EPD_SendCommand(epd, BOOSTER_SOFT_START);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2106      	movs	r1, #6
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 f8e2 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x07);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2107      	movs	r1, #7
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 f8f4 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x07);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2107      	movs	r1, #7
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f8ef 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x17);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2117      	movs	r1, #23
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 f8ea 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	21f8      	movs	r1, #248	; 0xf8
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 f8ce 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x60);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2160      	movs	r1, #96	; 0x60
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 f8e0 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	21a5      	movs	r1, #165	; 0xa5
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 f8db 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	21f8      	movs	r1, #248	; 0xf8
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f8bf 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x89);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2189      	movs	r1, #137	; 0x89
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 f8d1 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	21a5      	movs	r1, #165	; 0xa5
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 f8cc 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	21f8      	movs	r1, #248	; 0xf8
 8000308:	0018      	movs	r0, r3
 800030a:	f000 f8b0 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x90);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2190      	movs	r1, #144	; 0x90
 8000312:	0018      	movs	r0, r3
 8000314:	f000 f8c2 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x00);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2100      	movs	r1, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f000 f8bd 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	21f8      	movs	r1, #248	; 0xf8
 8000326:	0018      	movs	r0, r3
 8000328:	f000 f8a1 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x93);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2193      	movs	r1, #147	; 0x93
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8b3 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x2A);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	212a      	movs	r1, #42	; 0x2a
 800033a:	0018      	movs	r0, r3
 800033c:	f000 f8ae 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	21f8      	movs	r1, #248	; 0xf8
 8000344:	0018      	movs	r0, r3
 8000346:	f000 f892 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0xA0);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	21a0      	movs	r1, #160	; 0xa0
 800034e:	0018      	movs	r0, r3
 8000350:	f000 f8a4 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0xA5);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	21a5      	movs	r1, #165	; 0xa5
 8000358:	0018      	movs	r0, r3
 800035a:	f000 f89f 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	21f8      	movs	r1, #248	; 0xf8
 8000362:	0018      	movs	r0, r3
 8000364:	f000 f883 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0xA1);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	21a1      	movs	r1, #161	; 0xa1
 800036c:	0018      	movs	r0, r3
 800036e:	f000 f895 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x00);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2100      	movs	r1, #0
 8000376:	0018      	movs	r0, r3
 8000378:	f000 f890 	bl	800049c <EPD_SendData>
    // Power optimization
    EPD_SendCommand(epd, 0xF8);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	21f8      	movs	r1, #248	; 0xf8
 8000380:	0018      	movs	r0, r3
 8000382:	f000 f874 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x73);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2173      	movs	r1, #115	; 0x73
 800038a:	0018      	movs	r0, r3
 800038c:	f000 f886 	bl	800049c <EPD_SendData>
    EPD_SendData(epd, 0x41);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2141      	movs	r1, #65	; 0x41
 8000394:	0018      	movs	r0, r3
 8000396:	f000 f881 	bl	800049c <EPD_SendData>
    EPD_SendCommand(epd, PARTIAL_DISPLAY_REFRESH);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2116      	movs	r1, #22
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 f865 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x00);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2100      	movs	r1, #0
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 f877 	bl	800049c <EPD_SendData>
    EPD_SendCommand(epd, POWER_ON);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2104      	movs	r1, #4
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 f85b 	bl	800046e <EPD_SendCommand>
    EPD_WaitUntilIdle(epd);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 f885 	bl	80004ca <EPD_WaitUntilIdle>

    EPD_SendCommand(epd, PANEL_SETTING);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2100      	movs	r1, #0
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 f852 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0xAF);        //KW-BF   KWR-AF    BWROTP 0f
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	21af      	movs	r1, #175	; 0xaf
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f864 	bl	800049c <EPD_SendData>
    EPD_SendCommand(epd, PLL_CONTROL);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2130      	movs	r1, #48	; 0x30
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 f848 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x3A);       //3A 100HZ   29 150Hz 39 200HZ    31 171HZ
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	213a      	movs	r1, #58	; 0x3a
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 f85a 	bl	800049c <EPD_SendData>
    EPD_SendCommand(epd, VCM_DC_SETTING_REGISTER);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2182      	movs	r1, #130	; 0x82
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 f83e 	bl	800046e <EPD_SendCommand>
    EPD_SendData(epd, 0x12);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2112      	movs	r1, #18
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 f850 	bl	800049c <EPD_SendData>
    EPD_DelayMs(epd, 2);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2102      	movs	r1, #2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 f827 	bl	8000454 <EPD_DelayMs>
    EPD_SetLut(epd);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	0018      	movs	r0, r3
 800040a:	f000 f895 	bl	8000538 <EPD_SetLut>
    /* EPD hardware init end */
    return 0;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	b002      	add	sp, #8
 8000416:	bd80      	pop	{r7, pc}

08000418 <EPD_DigitalWrite>:

void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f000 f972 	bl	8000714 <EpdDigitalWriteCallback>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}

08000438 <EPD_DigitalRead>:

int EPD_DigitalRead(EPD* epd, int pin) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	0018      	movs	r0, r3
 8000446:	f000 f993 	bl	8000770 <EpdDigitalReadCallback>
 800044a:	0003      	movs	r3, r0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <EPD_DelayMs>:

void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f9a3 	bl	80007ac <EpdDelayMsCallback>
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}

0800046e <EPD_SendCommand>:

void EPD_SendCommand(EPD* epd, unsigned char command) {
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	000a      	movs	r2, r1
 8000478:	1cfb      	adds	r3, r7, #3
 800047a:	701a      	strb	r2, [r3, #0]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6859      	ldr	r1, [r3, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2200      	movs	r2, #0
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ffc7 	bl	8000418 <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 800048a:	1cfb      	adds	r3, r7, #3
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	0018      	movs	r0, r3
 8000490:	f000 f998 	bl	80007c4 <EpdSpiTransferCallback>
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <EPD_SendData>:

void EPD_SendData(EPD* epd, unsigned char data) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	000a      	movs	r2, r1
 80004a6:	1cfb      	adds	r3, r7, #3
 80004a8:	701a      	strb	r2, [r3, #0]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6859      	ldr	r1, [r3, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2201      	movs	r2, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ffb0 	bl	8000418 <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 80004b8:	1cfb      	adds	r3, r7, #3
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 f981 	bl	80007c4 <EpdSpiTransferCallback>
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}

080004ca <EPD_WaitUntilIdle>:

void EPD_WaitUntilIdle(EPD* epd) {
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b082      	sub	sp, #8
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 80004d2:	e004      	b.n	80004de <EPD_WaitUntilIdle+0x14>
    EPD_DelayMs(epd, 100);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2164      	movs	r1, #100	; 0x64
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ffbb 	bl	8000454 <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == 0) {      //0: busy, 1: idle
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	68da      	ldr	r2, [r3, #12]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	0011      	movs	r1, r2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff ffa6 	bl	8000438 <EPD_DigitalRead>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d0f1      	beq.n	80004d4 <EPD_WaitUntilIdle+0xa>
  }      
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <EPD_Reset>:

void EPD_Reset(EPD* epd) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6819      	ldr	r1, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f7ff ff85 	bl	8000418 <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	21c8      	movs	r1, #200	; 0xc8
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff ff9e 	bl	8000454 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6819      	ldr	r1, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2201      	movs	r2, #1
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ff79 	bl	8000418 <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);    
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	21c8      	movs	r1, #200	; 0xc8
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ff92 	bl	8000454 <EPD_DelayMs>
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}

08000538 <EPD_SetLut>:

void EPD_SetLut(EPD* epd) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  unsigned int count;     
  EPD_SendCommand(epd, LUT_FOR_VCOM);                            //vcom
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2120      	movs	r1, #32
 8000544:	0018      	movs	r0, r3
 8000546:	f7ff ff92 	bl	800046e <EPD_SendCommand>
  for(count = 0; count < 44; count++) {
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e00b      	b.n	8000568 <EPD_SetLut+0x30>
    EPD_SendData(epd, lut_vcom_dc[count]);
 8000550:	4a37      	ldr	r2, [pc, #220]	; (8000630 <EPD_SetLut+0xf8>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	18d3      	adds	r3, r2, r3
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff ff9d 	bl	800049c <EPD_SendData>
  for(count = 0; count < 44; count++) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b2b      	cmp	r3, #43	; 0x2b
 800056c:	d9f0      	bls.n	8000550 <EPD_SetLut+0x18>
  }
  
  EPD_SendCommand(epd, LUT_WHITE_TO_WHITE);                      //ww --
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2121      	movs	r1, #33	; 0x21
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff ff7b 	bl	800046e <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e00b      	b.n	8000596 <EPD_SetLut+0x5e>
    EPD_SendData(epd, lut_ww[count]);
 800057e:	4a2d      	ldr	r2, [pc, #180]	; (8000634 <EPD_SetLut+0xfc>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff ff86 	bl	800049c <EPD_SendData>
  for(count = 0; count < 42; count++) {
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b29      	cmp	r3, #41	; 0x29
 800059a:	d9f0      	bls.n	800057e <EPD_SetLut+0x46>
  }   
  
  EPD_SendCommand(epd, LUT_BLACK_TO_WHITE);                      //bw r
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2122      	movs	r1, #34	; 0x22
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff ff64 	bl	800046e <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e00b      	b.n	80005c4 <EPD_SetLut+0x8c>
    EPD_SendData(epd, lut_bw[count]);
 80005ac:	4a22      	ldr	r2, [pc, #136]	; (8000638 <EPD_SetLut+0x100>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff ff6f 	bl	800049c <EPD_SendData>
  for(count = 0; count < 42; count++) {
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b29      	cmp	r3, #41	; 0x29
 80005c8:	d9f0      	bls.n	80005ac <EPD_SetLut+0x74>
  } 

  EPD_SendCommand(epd, LUT_WHITE_TO_BLACK);                      //wb w
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2123      	movs	r1, #35	; 0x23
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ff4d 	bl	800046e <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00b      	b.n	80005f2 <EPD_SetLut+0xba>
    EPD_SendData(epd, lut_bb[count]);
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <EPD_SetLut+0x104>)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	18d3      	adds	r3, r2, r3
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ff58 	bl	800049c <EPD_SendData>
  for(count = 0; count < 42; count++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b29      	cmp	r3, #41	; 0x29
 80005f6:	d9f0      	bls.n	80005da <EPD_SetLut+0xa2>
  } 

  EPD_SendCommand(epd, LUT_BLACK_TO_BLACK);                      //bb b
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2124      	movs	r1, #36	; 0x24
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff36 	bl	800046e <EPD_SendCommand>
  for(count = 0; count < 42; count++) {
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e00b      	b.n	8000620 <EPD_SetLut+0xe8>
    EPD_SendData(epd, lut_wb[count]);
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <EPD_SetLut+0x108>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff ff41 	bl	800049c <EPD_SendData>
  for(count = 0; count < 42; count++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b29      	cmp	r3, #41	; 0x29
 8000624:	d9f0      	bls.n	8000608 <EPD_SetLut+0xd0>
  } 
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b004      	add	sp, #16
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	08004070 	.word	0x08004070
 8000634:	0800409c 	.word	0x0800409c
 8000638:	080040c8 	.word	0x080040c8
 800063c:	080040f4 	.word	0x080040f4
 8000640:	08004120 	.word	0x08004120

08000644 <EPD_DisplayFrame>:

void EPD_DisplayFrame(EPD* epd, const unsigned char* frame_buffer) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  if (frame_buffer != NULL) {
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d05a      	beq.n	800070a <EPD_DisplayFrame+0xc6>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_1);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2110      	movs	r1, #16
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff08 	bl	800046e <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2102      	movs	r1, #2
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fef6 	bl	8000454 <EPD_DelayMs>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e007      	b.n	800067e <EPD_DisplayFrame+0x3a>
      EPD_SendData(epd, 0xFF);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	21ff      	movs	r1, #255	; 0xff
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff ff12 	bl	800049c <EPD_SendData>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	2b00      	cmp	r3, #0
 8000684:	da00      	bge.n	8000688 <EPD_DisplayFrame+0x44>
 8000686:	3307      	adds	r3, #7
 8000688:	10db      	asrs	r3, r3, #3
 800068a:	001a      	movs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4353      	muls	r3, r2
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbea      	blt.n	800066e <EPD_DisplayFrame+0x2a>
    }
    EPD_DelayMs(epd, 2);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2102      	movs	r1, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff fed9 	bl	8000454 <EPD_DelayMs>
    EPD_SendCommand(epd, DATA_START_TRANSMISSION_2);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2113      	movs	r1, #19
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fee1 	bl	800046e <EPD_SendCommand>
    EPD_DelayMs(epd, 2);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2102      	movs	r1, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fecf 	bl	8000454 <EPD_DelayMs>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	e00b      	b.n	80006d4 <EPD_DisplayFrame+0x90>
      EPD_SendData(epd, frame_buffer[i]);
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	18d3      	adds	r3, r2, r3
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fee7 	bl	800049c <EPD_SendData>
    for(int i = 0; i < epd->width / 8 * epd->height; i++) {
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	da00      	bge.n	80006de <EPD_DisplayFrame+0x9a>
 80006dc:	3307      	adds	r3, #7
 80006de:	10db      	asrs	r3, r3, #3
 80006e0:	001a      	movs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4353      	muls	r3, r2
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	dbe6      	blt.n	80006bc <EPD_DisplayFrame+0x78>
    }
    EPD_DelayMs(epd, 2);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2102      	movs	r1, #2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff feae 	bl	8000454 <EPD_DelayMs>
    EPD_SendCommand(epd, DISPLAY_REFRESH);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2112      	movs	r1, #18
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff feb6 	bl	800046e <EPD_SendCommand>
    EPD_WaitUntilIdle(epd);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff fee0 	bl	80004ca <EPD_WaitUntilIdle>
  }
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b004      	add	sp, #16
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <EpdDigitalWriteCallback>:
  E_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10f      	bne.n	8000744 <EpdDigitalWriteCallback+0x30>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <EpdDigitalWriteCallback+0x58>)
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	58d0      	ldr	r0, [r2, r3]
 800072c:	4a0f      	ldr	r2, [pc, #60]	; (800076c <EpdDigitalWriteCallback+0x58>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	18d3      	adds	r3, r2, r3
 8000734:	3304      	adds	r3, #4
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	2201      	movs	r2, #1
 800073c:	0019      	movs	r1, r3
 800073e:	f001 fb88 	bl	8001e52 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8000742:	e00e      	b.n	8000762 <EpdDigitalWriteCallback+0x4e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <EpdDigitalWriteCallback+0x58>)
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	00d2      	lsls	r2, r2, #3
 800074a:	58d0      	ldr	r0, [r2, r3]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <EpdDigitalWriteCallback+0x58>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	18d3      	adds	r3, r2, r3
 8000754:	3304      	adds	r3, #4
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	2200      	movs	r2, #0
 800075c:	0019      	movs	r1, r3
 800075e:	f001 fb78 	bl	8001e52 <HAL_GPIO_WritePin>
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000c8 	.word	0x200000c8

08000770 <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <EpdDigitalReadCallback+0x38>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	58d0      	ldr	r0, [r2, r3]
 8000780:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <EpdDigitalReadCallback+0x38>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	18d3      	adds	r3, r2, r3
 8000788:	3304      	adds	r3, #4
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	0019      	movs	r1, r3
 8000790:	f001 fb42 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000794:	0003      	movs	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d101      	bne.n	800079e <EpdDigitalReadCallback+0x2e>
    return HIGH;
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 800079e:	2300      	movs	r3, #0
  }
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000c8 	.word	0x200000c8

080007ac <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f8e8 	bl	800198c <HAL_Delay>
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <EpdSpiTransferCallback+0x48>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <EpdSpiTransferCallback+0x48>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	0019      	movs	r1, r3
 80007de:	f001 fb38 	bl	8001e52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80007e2:	23fa      	movs	r3, #250	; 0xfa
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	1df9      	adds	r1, r7, #7
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <EpdSpiTransferCallback+0x4c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	f002 f934 	bl	8002a58 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <EpdSpiTransferCallback+0x48>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <EpdSpiTransferCallback+0x48>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	2201      	movs	r2, #1
 80007fc:	0019      	movs	r1, r3
 80007fe:	f001 fb28 	bl	8001e52 <HAL_GPIO_WritePin>
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	200000c8 	.word	0x200000c8
 8000810:	20000168 	.word	0x20000168

08000814 <EpdInitCallback>:

int EpdInitCallback(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <EpdInitCallback+0x34>)
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <EpdInitCallback+0x38>)
 800081c:	ca03      	ldmia	r2!, {r0, r1}
 800081e:	c303      	stmia	r3!, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <EpdInitCallback+0x34>)
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <EpdInitCallback+0x3c>)
 8000824:	3308      	adds	r3, #8
 8000826:	ca03      	ldmia	r2!, {r0, r1}
 8000828:	c303      	stmia	r3!, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <EpdInitCallback+0x34>)
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <EpdInitCallback+0x40>)
 800082e:	3310      	adds	r3, #16
 8000830:	ca03      	ldmia	r2!, {r0, r1}
 8000832:	c303      	stmia	r3!, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <EpdInitCallback+0x34>)
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <EpdInitCallback+0x44>)
 8000838:	3318      	adds	r3, #24
 800083a:	ca03      	ldmia	r2!, {r0, r1}
 800083c:	c303      	stmia	r3!, {r0, r1}
  
  return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	200000c8 	.word	0x200000c8
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000010 	.word	0x20000010
 8000858:	20000018 	.word	0x20000018

0800085c <Paint_Init>:
 */

#include "epdpaint.h"


void Paint_Init(Paint* paint, unsigned char* image, int width, int height) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	603b      	str	r3, [r7, #0]
    paint->rotate = ROTATE_0;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    paint->image = image;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	601a      	str	r2, [r3, #0]
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2207      	movs	r2, #7
 800087a:	4013      	ands	r3, r2
 800087c:	d00d      	beq.n	800089a <Paint_Init+0x3e>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3308      	adds	r3, #8
 8000882:	001a      	movs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	490a      	ldr	r1, [pc, #40]	; (80008b0 <Paint_Init+0x54>)
 8000888:	400b      	ands	r3, r1
 800088a:	d504      	bpl.n	8000896 <Paint_Init+0x3a>
 800088c:	3b01      	subs	r3, #1
 800088e:	2108      	movs	r1, #8
 8000890:	4249      	negs	r1, r1
 8000892:	430b      	orrs	r3, r1
 8000894:	3301      	adds	r3, #1
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	e000      	b.n	800089c <Paint_Init+0x40>
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
    paint->height = height;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	609a      	str	r2, [r3, #8]
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b004      	add	sp, #16
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	80000007 	.word	0x80000007

080008b4 <Paint_Clear>:

/**
 *  @brief: clear the image
 */
void Paint_Clear(Paint* paint, int colored) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
    for (int x = 0; x < paint->width; x++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e013      	b.n	80008ec <Paint_Clear+0x38>
        for (int y = 0; y < paint->height; y++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	e008      	b.n	80008dc <Paint_Clear+0x28>
            Paint_DrawAbsolutePixel(paint, x, y, colored);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	68f9      	ldr	r1, [r7, #12]
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f815 	bl	8000900 <Paint_DrawAbsolutePixel>
        for (int y = 0; y < paint->height; y++) {
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dbf1      	blt.n	80008ca <Paint_Clear+0x16>
    for (int x = 0; x < paint->width; x++) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbe6      	blt.n	80008c4 <Paint_Clear+0x10>
        }
    }
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b004      	add	sp, #16
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <Paint_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint_DrawAbsolutePixel(Paint* paint, int x, int y, int colored) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	603b      	str	r3, [r7, #0]
    if (x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db5f      	blt.n	80009d4 <Paint_DrawAbsolutePixel+0xd4>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	429a      	cmp	r2, r3
 800091c:	da5a      	bge.n	80009d4 <Paint_DrawAbsolutePixel+0xd4>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db57      	blt.n	80009d4 <Paint_DrawAbsolutePixel+0xd4>
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	429a      	cmp	r2, r3
 800092c:	da52      	bge.n	80009d4 <Paint_DrawAbsolutePixel+0xd4>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d026      	beq.n	8000982 <Paint_DrawAbsolutePixel+0x82>
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4359      	muls	r1, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	18cb      	adds	r3, r1, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	da00      	bge.n	800094a <Paint_DrawAbsolutePixel+0x4a>
 8000948:	3307      	adds	r3, #7
 800094a:	10db      	asrs	r3, r3, #3
 800094c:	0018      	movs	r0, r3
 800094e:	0003      	movs	r3, r0
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b25a      	sxtb	r2, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4920      	ldr	r1, [pc, #128]	; (80009dc <Paint_DrawAbsolutePixel+0xdc>)
 800095a:	400b      	ands	r3, r1
 800095c:	d504      	bpl.n	8000968 <Paint_DrawAbsolutePixel+0x68>
 800095e:	3b01      	subs	r3, #1
 8000960:	2108      	movs	r1, #8
 8000962:	4249      	negs	r1, r1
 8000964:	430b      	orrs	r3, r1
 8000966:	3301      	adds	r3, #1
 8000968:	0019      	movs	r1, r3
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	410b      	asrs	r3, r1
 800096e:	b25b      	sxtb	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b25a      	sxtb	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	0001      	movs	r1, r0
 800097a:	185b      	adds	r3, r3, r1
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e029      	b.n	80009d6 <Paint_DrawAbsolutePixel+0xd6>
        } else {
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	4359      	muls	r1, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	18cb      	adds	r3, r1, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	da00      	bge.n	8000998 <Paint_DrawAbsolutePixel+0x98>
 8000996:	3307      	adds	r3, #7
 8000998:	10db      	asrs	r3, r3, #3
 800099a:	0018      	movs	r0, r3
 800099c:	0003      	movs	r3, r0
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b25a      	sxtb	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <Paint_DrawAbsolutePixel+0xdc>)
 80009a8:	400b      	ands	r3, r1
 80009aa:	d504      	bpl.n	80009b6 <Paint_DrawAbsolutePixel+0xb6>
 80009ac:	3b01      	subs	r3, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	4249      	negs	r1, r1
 80009b2:	430b      	orrs	r3, r1
 80009b4:	3301      	adds	r3, #1
 80009b6:	0019      	movs	r1, r3
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	410b      	asrs	r3, r1
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	4013      	ands	r3, r2
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0001      	movs	r1, r0
 80009cc:	185b      	adds	r3, r3, r1
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e000      	b.n	80009d6 <Paint_DrawAbsolutePixel+0xd6>
        return;
 80009d4:	46c0      	nop			; (mov r8, r8)
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	80000007 	.word	0x80000007

080009e0 <Paint_SetRotate>:

int Paint_GetRotate(Paint* paint) {
    return paint->rotate;
}

void Paint_SetRotate(Paint* paint, int rotate){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
    paint->rotate = rotate;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	60da      	str	r2, [r3, #12]
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <Paint_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint_DrawPixel(Paint* paint, int x, int y, int colored) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11a      	bne.n	8000a44 <Paint_DrawPixel+0x4c>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	da00      	bge.n	8000a16 <Paint_DrawPixel+0x1e>
 8000a14:	e084      	b.n	8000b20 <Paint_DrawPixel+0x128>
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	db00      	blt.n	8000a22 <Paint_DrawPixel+0x2a>
 8000a20:	e07e      	b.n	8000b20 <Paint_DrawPixel+0x128>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	da00      	bge.n	8000a2a <Paint_DrawPixel+0x32>
 8000a28:	e07a      	b.n	8000b20 <Paint_DrawPixel+0x128>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	db00      	blt.n	8000a36 <Paint_DrawPixel+0x3e>
 8000a34:	e074      	b.n	8000b20 <Paint_DrawPixel+0x128>
            return;
        }
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff ff5f 	bl	8000900 <Paint_DrawAbsolutePixel>
 8000a42:	e074      	b.n	8000b2e <Paint_DrawPixel+0x136>
    } else if (paint->rotate == ROTATE_90) {
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d120      	bne.n	8000a8e <Paint_DrawPixel+0x96>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da00      	bge.n	8000a54 <Paint_DrawPixel+0x5c>
 8000a52:	e067      	b.n	8000b24 <Paint_DrawPixel+0x12c>
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	da62      	bge.n	8000b24 <Paint_DrawPixel+0x12c>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db5f      	blt.n	8000b24 <Paint_DrawPixel+0x12c>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da5a      	bge.n	8000b24 <Paint_DrawPixel+0x12c>
          return;
        }
        point_temp = x;
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff ff3a 	bl	8000900 <Paint_DrawAbsolutePixel>
 8000a8c:	e04f      	b.n	8000b2e <Paint_DrawPixel+0x136>
    } else if (paint->rotate == ROTATE_180) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d120      	bne.n	8000ad8 <Paint_DrawPixel+0xe0>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db45      	blt.n	8000b28 <Paint_DrawPixel+0x130>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	da40      	bge.n	8000b28 <Paint_DrawPixel+0x130>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db3d      	blt.n	8000b28 <Paint_DrawPixel+0x130>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	da38      	bge.n	8000b28 <Paint_DrawPixel+0x130>
          return;
        }
        x = paint->width - x;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff ff15 	bl	8000900 <Paint_DrawAbsolutePixel>
 8000ad6:	e02a      	b.n	8000b2e <Paint_DrawPixel+0x136>
    } else if (paint->rotate == ROTATE_270) {
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d126      	bne.n	8000b2e <Paint_DrawPixel+0x136>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db22      	blt.n	8000b2c <Paint_DrawPixel+0x134>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	da1d      	bge.n	8000b2c <Paint_DrawPixel+0x134>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db1a      	blt.n	8000b2c <Paint_DrawPixel+0x134>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	da15      	bge.n	8000b2c <Paint_DrawPixel+0x134>
          return;
        }
        point_temp = x;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	617b      	str	r3, [r7, #20]
        x = y;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	68b9      	ldr	r1, [r7, #8]
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff fef1 	bl	8000900 <Paint_DrawAbsolutePixel>
 8000b1e:	e006      	b.n	8000b2e <Paint_DrawPixel+0x136>
            return;
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	e004      	b.n	8000b2e <Paint_DrawPixel+0x136>
          return;
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	e002      	b.n	8000b2e <Paint_DrawPixel+0x136>
          return;
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	e000      	b.n	8000b2e <Paint_DrawPixel+0x136>
          return;
 8000b2c:	46c0      	nop			; (mov r8, r8)
    }
}
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b006      	add	sp, #24
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Paint_DrawCharAt>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint_DrawCharAt(Paint* paint, int x, int y, char ascii_char, sFONT* font, int colored) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	001a      	movs	r2, r3
 8000b42:	1cfb      	adds	r3, r7, #3
 8000b44:	701a      	strb	r2, [r3, #0]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	3b20      	subs	r3, #32
 8000b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b4e:	88d2      	ldrh	r2, [r2, #6]
 8000b50:	4353      	muls	r3, r2
 8000b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b54:	8892      	ldrh	r2, [r2, #4]
 8000b56:	08d2      	lsrs	r2, r2, #3
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	0010      	movs	r0, r2
 8000b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5e:	8892      	ldrh	r2, [r2, #4]
 8000b60:	2107      	movs	r1, #7
 8000b62:	400a      	ands	r2, r1
 8000b64:	b292      	uxth	r2, r2
 8000b66:	1e51      	subs	r1, r2, #1
 8000b68:	418a      	sbcs	r2, r1
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	1882      	adds	r2, r0, r2
 8000b6e:	4353      	muls	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8000b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	e041      	b.n	8000c06 <Paint_DrawCharAt+0xd2>
        for (i = 0; i < font->Width; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	e02b      	b.n	8000be0 <Paint_DrawCharAt+0xac>
            if (*ptr & (0x80 >> (i % 8))) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <Paint_DrawCharAt+0xe8>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	d504      	bpl.n	8000ba0 <Paint_DrawCharAt+0x6c>
 8000b96:	3b01      	subs	r3, #1
 8000b98:	2208      	movs	r2, #8
 8000b9a:	4252      	negs	r2, r2
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	4113      	asrs	r3, r2
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	d009      	beq.n	8000bbe <Paint_DrawCharAt+0x8a>
                Paint_DrawPixel(paint, x + i, y + j, colored);
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	18d1      	adds	r1, r2, r3
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff ff1d 	bl	80009f8 <Paint_DrawPixel>
            }
            if (i % 8 == 7) {
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <Paint_DrawCharAt+0xe8>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	d504      	bpl.n	8000bd0 <Paint_DrawCharAt+0x9c>
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4252      	negs	r2, r2
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	2b07      	cmp	r3, #7
 8000bd2:	d102      	bne.n	8000bda <Paint_DrawCharAt+0xa6>
                ptr++;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be2:	889b      	ldrh	r3, [r3, #4]
 8000be4:	001a      	movs	r2, r3
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	dbcd      	blt.n	8000b88 <Paint_DrawCharAt+0x54>
            }
        }
        if (font->Width % 8 != 0) {
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	889b      	ldrh	r3, [r3, #4]
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <Paint_DrawCharAt+0xcc>
            ptr++;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	3301      	adds	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	88db      	ldrh	r3, [r3, #6]
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	dbb7      	blt.n	8000b82 <Paint_DrawCharAt+0x4e>
        }
    }
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b008      	add	sp, #32
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	80000007 	.word	0x80000007

08000c20 <Paint_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint_DrawStringAt(Paint* paint, int x, int y, const char* text, sFONT* font, int colored) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	603b      	str	r3, [r7, #0]
    const char* p_text = text;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	617b      	str	r3, [r7, #20]
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8000c3a:	e017      	b.n	8000c6c <Paint_DrawStringAt+0x4c>
        /* Display one character on EPD */
        Paint_DrawCharAt(paint, refcolumn, y, *p_text, font, colored);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	781c      	ldrb	r4, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6979      	ldr	r1, [r7, #20]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	0023      	movs	r3, r4
 8000c50:	f7ff ff70 	bl	8000b34 <Paint_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8000c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c56:	889b      	ldrh	r3, [r3, #4]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	3301      	adds	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
        counter++;
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e3      	bne.n	8000c3c <Paint_DrawStringAt+0x1c>
    }
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b009      	add	sp, #36	; 0x24
 8000c7a:	bd90      	pop	{r4, r7, pc}

08000c7c <Paint_DrawLine>:

/**
*  @brief: this draws a line on the frame buffer
*/
void Paint_DrawLine(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	17da      	asrs	r2, r3, #31
 8000c92:	189b      	adds	r3, r3, r2
 8000c94:	4053      	eors	r3, r2
 8000c96:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	da01      	bge.n	8000ca4 <Paint_DrawLine+0x28>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e001      	b.n	8000ca8 <Paint_DrawLine+0x2c>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	61fb      	str	r3, [r7, #28]
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
 8000caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	17da      	asrs	r2, r3, #31
 8000cb2:	189b      	adds	r3, r3, r2
 8000cb4:	4053      	eors	r3, r2
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	da01      	bge.n	8000cc6 <Paint_DrawLine+0x4a>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e001      	b.n	8000cca <Paint_DrawLine+0x4e>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425b      	negs	r3, r3
 8000cca:	617b      	str	r3, [r7, #20]
    int err = dx + dy;
 8000ccc:	6a3a      	ldr	r2, [r7, #32]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

    while((x0 != x1) && (y0 != y1)) {
 8000cd4:	e01f      	b.n	8000d16 <Paint_DrawLine+0x9a>
        Paint_DrawPixel(paint, x0, y0 , colored);
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fe8b 	bl	80009f8 <Paint_DrawPixel>
        if (2 * err >= dy) {     
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc07      	bgt.n	8000cfc <Paint_DrawLine+0x80>
            err += dy;
 8000cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
            x0 += sx;
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	60bb      	str	r3, [r7, #8]
        }
        if (2 * err <= dx) {
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	6a3a      	ldr	r2, [r7, #32]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	db07      	blt.n	8000d16 <Paint_DrawLine+0x9a>
            err += dx; 
 8000d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	18d3      	adds	r3, r2, r3
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
            y0 += sy;
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	607b      	str	r3, [r7, #4]
    while((x0 != x1) && (y0 != y1)) {
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d003      	beq.n	8000d26 <Paint_DrawLine+0xaa>
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d1d7      	bne.n	8000cd6 <Paint_DrawLine+0x5a>
        }
    }
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b00a      	add	sp, #40	; 0x28
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <Paint_DrawHorizontalLine>:

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	603b      	str	r3, [r7, #0]
    int i;
    for (i = x; i < x + line_width; i++) {
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e008      	b.n	8000d54 <Paint_DrawHorizontalLine+0x26>
        Paint_DrawPixel(paint, i, y, colored);
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6979      	ldr	r1, [r7, #20]
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff fe55 	bl	80009f8 <Paint_DrawPixel>
    for (i = x; i < x + line_width; i++) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <Paint_DrawHorizontalLine+0x14>
    }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b006      	add	sp, #24
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <Paint_DrawVerticalLine>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint_DrawVerticalLine(Paint* paint, int x, int y, int line_height, int colored) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
    int i;
    for (i = y; i < y + line_height; i++) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e008      	b.n	8000d8e <Paint_DrawVerticalLine+0x26>
        Paint_DrawPixel(paint, x, i, colored);
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff fe38 	bl	80009f8 <Paint_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	18d3      	adds	r3, r2, r3
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dbf0      	blt.n	8000d7c <Paint_DrawVerticalLine+0x14>
    }
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b006      	add	sp, #24
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <Paint_DrawRectangle>:

/**
*  @brief: this draws a rectangle
*/
void Paint_DrawRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000da2:	b590      	push	{r4, r7, lr}
 8000da4:	b08b      	sub	sp, #44	; 0x2c
 8000da6:	af02      	add	r7, sp, #8
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	dd00      	ble.n	8000dba <Paint_DrawRectangle+0x18>
 8000db8:	0013      	movs	r3, r2
 8000dba:	61fb      	str	r3, [r7, #28]
    max_x = x1 > x0 ? x1 : x0;
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	da00      	bge.n	8000dc6 <Paint_DrawRectangle+0x24>
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
    min_y = y1 > y0 ? y0 : y1;
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	dd00      	ble.n	8000dd2 <Paint_DrawRectangle+0x30>
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]
    max_y = y1 > y0 ? y1 : y0;
 8000dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	da00      	bge.n	8000dde <Paint_DrawRectangle+0x3c>
 8000ddc:	0013      	movs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
    
    Paint_DrawHorizontalLine(paint, min_x, min_y, max_x - min_x + 1, colored);
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	1c5c      	adds	r4, r3, #1
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	69f9      	ldr	r1, [r7, #28]
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	0023      	movs	r3, r4
 8000df4:	f7ff ff9b 	bl	8000d2e <Paint_DrawHorizontalLine>
    Paint_DrawHorizontalLine(paint, min_x, max_y, max_x - min_x + 1, colored);
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	1c5c      	adds	r4, r3, #1
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	69f9      	ldr	r1, [r7, #28]
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	0023      	movs	r3, r4
 8000e0c:	f7ff ff8f 	bl	8000d2e <Paint_DrawHorizontalLine>
    Paint_DrawVerticalLine(paint, min_x, min_y, max_y - min_y + 1, colored);
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	1c5c      	adds	r4, r3, #1
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	69f9      	ldr	r1, [r7, #28]
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	0023      	movs	r3, r4
 8000e24:	f7ff ffa0 	bl	8000d68 <Paint_DrawVerticalLine>
    Paint_DrawVerticalLine(paint, max_x, min_y, max_y - min_y + 1, colored);
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	1c5c      	adds	r4, r3, #1
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	69b9      	ldr	r1, [r7, #24]
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	0023      	movs	r3, r4
 8000e3c:	f7ff ff94 	bl	8000d68 <Paint_DrawVerticalLine>
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b009      	add	sp, #36	; 0x24
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <Paint_DrawFilledRectangle>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint_DrawFilledRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08d      	sub	sp, #52	; 0x34
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	dd00      	ble.n	8000e60 <Paint_DrawFilledRectangle+0x18>
 8000e5e:	0013      	movs	r3, r2
 8000e60:	623b      	str	r3, [r7, #32]
    max_x = x1 > x0 ? x1 : x0;
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	da00      	bge.n	8000e6c <Paint_DrawFilledRectangle+0x24>
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	61fb      	str	r3, [r7, #28]
    min_y = y1 > y0 ? y0 : y1;
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dd00      	ble.n	8000e78 <Paint_DrawFilledRectangle+0x30>
 8000e76:	0013      	movs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
    max_y = y1 > y0 ? y1 : y0;
 8000e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	da00      	bge.n	8000e84 <Paint_DrawFilledRectangle+0x3c>
 8000e82:	0013      	movs	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
    
    for (i = min_x; i <= max_x; i++) {
 8000e86:	6a3b      	ldr	r3, [r7, #32]
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	e00e      	b.n	8000eaa <Paint_DrawFilledRectangle+0x62>
      Paint_DrawVerticalLine(paint, i, min_y, max_y - min_y + 1, colored);
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	1c5c      	adds	r4, r3, #1
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	0023      	movs	r3, r4
 8000ea0:	f7ff ff62 	bl	8000d68 <Paint_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	ddec      	ble.n	8000e8c <Paint_DrawFilledRectangle+0x44>
    }
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}

08000eba <Paint_DrawCircle>:

/**
*  @brief: this draws a circle
*/
void Paint_DrawCircle(Paint* paint, int x, int y, int radius, int colored) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b088      	sub	sp, #32
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	425b      	negs	r3, r3
 8000ecc:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	1ad1      	subs	r1, r2, r3
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	18d2      	adds	r2, r2, r3
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fd84 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	18d1      	adds	r1, r2, r3
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	18d2      	adds	r2, r2, r3
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff fd7a 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	18d1      	adds	r1, r2, r3
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff fd70 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	1ad1      	subs	r1, r2, r3
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f7ff fd66 	bl	80009f8 <Paint_DrawPixel>
        e2 = err;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dc13      	bgt.n	8000f60 <Paint_DrawCircle+0xa6>
            err += ++y_pos * 2 + 1;
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	3301      	adds	r3, #1
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d105      	bne.n	8000f60 <Paint_DrawCircle+0xa6>
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dc01      	bgt.n	8000f60 <Paint_DrawCircle+0xa6>
              e2 = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
            }
        }
        if (e2 > x_pos) {
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dd08      	ble.n	8000f7a <Paint_DrawCircle+0xc0>
            err += ++x_pos * 2 + 1;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	3301      	adds	r3, #1
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	18d3      	adds	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
        }
    } while (x_pos <= 0);
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	ddad      	ble.n	8000edc <Paint_DrawCircle+0x22>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b008      	add	sp, #32
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Paint_DrawFilledCircle>:

/**
*  @brief: this draws a filled circle
*/
void Paint_DrawFilledCircle(Paint* paint, int x, int y, int radius, int colored) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08b      	sub	sp, #44	; 0x2c
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	425b      	negs	r3, r3
 8000f9a:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	1ad1      	subs	r1, r2, r3
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	18d2      	adds	r2, r2, r3
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff fd1d 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	18d1      	adds	r1, r2, r3
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	18d2      	adds	r2, r2, r3
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fd13 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	18d1      	adds	r1, r2, r3
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	1ad2      	subs	r2, r2, r3
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff fd09 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	1ad1      	subs	r1, r2, r3
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad2      	subs	r2, r2, r3
 8000ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fcff 	bl	80009f8 <Paint_DrawPixel>
        Paint_DrawHorizontalLine(paint, x + x_pos, y + y_pos, 2 * (-x_pos) + 1, colored);
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	18d1      	adds	r1, r2, r3
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	18d4      	adds	r4, r2, r3
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	0013      	movs	r3, r2
 800100a:	07db      	lsls	r3, r3, #31
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	0013      	movs	r3, r2
 800101a:	0022      	movs	r2, r4
 800101c:	f7ff fe87 	bl	8000d2e <Paint_DrawHorizontalLine>
        Paint_DrawHorizontalLine(paint, x + x_pos, y - y_pos, 2 * (-x_pos) + 1, colored);
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	18d1      	adds	r1, r2, r3
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad4      	subs	r4, r2, r3
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	0013      	movs	r3, r2
 8001030:	07db      	lsls	r3, r3, #31
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	0013      	movs	r3, r2
 8001040:	0022      	movs	r2, r4
 8001042:	f7ff fe74 	bl	8000d2e <Paint_DrawHorizontalLine>
        e2 = err;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	429a      	cmp	r2, r3
 8001050:	dc13      	bgt.n	800107a <Paint_DrawFilledCircle+0xf2>
            err += ++y_pos * 2 + 1;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3301      	adds	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	3301      	adds	r3, #1
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	425b      	negs	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	429a      	cmp	r2, r3
 800106c:	d105      	bne.n	800107a <Paint_DrawFilledCircle+0xf2>
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	429a      	cmp	r2, r3
 8001074:	dc01      	bgt.n	800107a <Paint_DrawFilledCircle+0xf2>
                e2 = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
            }
        }
        if(e2 > x_pos) {
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	429a      	cmp	r2, r3
 8001080:	dd08      	ble.n	8001094 <Paint_DrawFilledCircle+0x10c>
            err += ++x_pos * 2 + 1;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	3301      	adds	r3, #1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
        }
    } while(x_pos <= 0);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b00      	cmp	r3, #0
 8001098:	dd87      	ble.n	8000faa <Paint_DrawFilledCircle+0x22>
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b009      	add	sp, #36	; 0x24
 80010a0:	bd90      	pop	{r4, r7, pc}
	...

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b08f      	sub	sp, #60	; 0x3c
 80010a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 80010aa:	2394      	movs	r3, #148	; 0x94
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	0018      	movs	r0, r3
 80010b0:	f002 fafa 	bl	80036a8 <malloc>
 80010b4:	0003      	movs	r3, r0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f000 fc04 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f8b0 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 f96a 	bl	8001398 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010c4:	f000 f902 	bl	80012cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010c8:	f000 f93a 	bl	8001340 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  EPD epd;
  if (EPD_Init(&epd) != 0) {
 80010cc:	2314      	movs	r3, #20
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff f8a5 	bl	8000220 <EPD_Init>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d006      	beq.n	80010e8 <main+0x44>
      printf("e-Paper init failed\n");
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <main+0x160>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f002 fbfd 	bl	80038dc <puts>
      return -1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	e088      	b.n	80011fa <main+0x156>
    }

    Paint paint;
    Paint_Init(&paint, frame_buffer, epd.width, epd.height);
 80010e8:	2414      	movs	r4, #20
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010f4:	1d38      	adds	r0, r7, #4
 80010f6:	f7ff fbb1 	bl	800085c <Paint_Init>
    Paint_Clear(&paint, UNCOLORED);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2101      	movs	r1, #1
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff fbd8 	bl	80008b4 <Paint_Clear>

    /* Draw something to the frame buffer */
    /* For simplicity, the arguments are explicit numerical coordinates */
    Paint_SetRotate(&paint, ROTATE_0);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2100      	movs	r1, #0
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fc69 	bl	80009e0 <Paint_SetRotate>
    Paint_DrawStringAt(&paint, 4, 50, "TZ", &Font20, COLORED);
 800110e:	4a3e      	ldr	r2, [pc, #248]	; (8001208 <main+0x164>)
 8001110:	1d38      	adds	r0, r7, #4
 8001112:	2300      	movs	r3, #0
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <main+0x168>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	0013      	movs	r3, r2
 800111c:	2232      	movs	r2, #50	; 0x32
 800111e:	2104      	movs	r1, #4
 8001120:	f7ff fd7e 	bl	8000c20 <Paint_DrawStringAt>
    Paint_DrawRectangle(&paint, 10, 130, 50, 180, COLORED);
 8001124:	1d38      	adds	r0, r7, #4
 8001126:	2300      	movs	r3, #0
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	23b4      	movs	r3, #180	; 0xb4
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2332      	movs	r3, #50	; 0x32
 8001130:	2282      	movs	r2, #130	; 0x82
 8001132:	210a      	movs	r1, #10
 8001134:	f7ff fe35 	bl	8000da2 <Paint_DrawRectangle>
    Paint_DrawLine(&paint, 10, 130, 50, 180, COLORED);
 8001138:	1d38      	adds	r0, r7, #4
 800113a:	2300      	movs	r3, #0
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	23b4      	movs	r3, #180	; 0xb4
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2332      	movs	r3, #50	; 0x32
 8001144:	2282      	movs	r2, #130	; 0x82
 8001146:	210a      	movs	r1, #10
 8001148:	f7ff fd98 	bl	8000c7c <Paint_DrawLine>
    Paint_DrawLine(&paint, 50, 130, 10, 180, COLORED);
 800114c:	1d38      	adds	r0, r7, #4
 800114e:	2300      	movs	r3, #0
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	23b4      	movs	r3, #180	; 0xb4
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	230a      	movs	r3, #10
 8001158:	2282      	movs	r2, #130	; 0x82
 800115a:	2132      	movs	r1, #50	; 0x32
 800115c:	f7ff fd8e 	bl	8000c7c <Paint_DrawLine>
    Paint_DrawCircle(&paint, 100, 150, 25, COLORED);
 8001160:	1d38      	adds	r0, r7, #4
 8001162:	2300      	movs	r3, #0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2319      	movs	r3, #25
 8001168:	2296      	movs	r2, #150	; 0x96
 800116a:	2164      	movs	r1, #100	; 0x64
 800116c:	f7ff fea5 	bl	8000eba <Paint_DrawCircle>
    Paint_DrawFilledRectangle(&paint, 10, 200, 50, 250, COLORED);
 8001170:	1d38      	adds	r0, r7, #4
 8001172:	2300      	movs	r3, #0
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	23fa      	movs	r3, #250	; 0xfa
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2332      	movs	r3, #50	; 0x32
 800117c:	22c8      	movs	r2, #200	; 0xc8
 800117e:	210a      	movs	r1, #10
 8001180:	f7ff fe62 	bl	8000e48 <Paint_DrawFilledRectangle>
    Paint_DrawFilledRectangle(&paint, 0, 76, 176, 96, COLORED);
 8001184:	1d38      	adds	r0, r7, #4
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2360      	movs	r3, #96	; 0x60
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	23b0      	movs	r3, #176	; 0xb0
 8001190:	224c      	movs	r2, #76	; 0x4c
 8001192:	2100      	movs	r1, #0
 8001194:	f7ff fe58 	bl	8000e48 <Paint_DrawFilledRectangle>
    Paint_DrawFilledCircle(&paint, 100, 220, 25, COLORED);
 8001198:	1d38      	adds	r0, r7, #4
 800119a:	2300      	movs	r3, #0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2319      	movs	r3, #25
 80011a0:	22dc      	movs	r2, #220	; 0xdc
 80011a2:	2164      	movs	r1, #100	; 0x64
 80011a4:	f7ff fef0 	bl	8000f88 <Paint_DrawFilledCircle>
    Paint_DrawStringAt(&paint, 18, 80, "NB!", &Font16, UNCOLORED);
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <main+0x16c>)
 80011aa:	1d38      	adds	r0, r7, #4
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <main+0x170>)
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	0013      	movs	r3, r2
 80011b6:	2250      	movs	r2, #80	; 0x50
 80011b8:	2112      	movs	r1, #18
 80011ba:	f7ff fd31 	bl	8000c20 <Paint_DrawStringAt>

    /* Display the frame_buffer */
    EPD_DisplayFrame(&epd, frame_buffer);
 80011be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff fa3d 	bl	8000644 <EPD_DisplayFrame>

    /* Display the image buffer */
    EPD_DisplayFrame(&epd, IMAGE_DATA);
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <main+0x174>)
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fa37 	bl	8000644 <EPD_DisplayFrame>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    Paint_Clear(&paint, UNCOLORED);
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2101      	movs	r1, #1
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff fb6a 	bl	80008b4 <Paint_Clear>
    /* USER CODE END WHILE */
    EPD_DisplayFrame(&epd, frame_buffer);
 80011e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	0011      	movs	r1, r2
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff fa2c 	bl	8000644 <EPD_DisplayFrame>
    EPD_DisplayFrame(&epd, gImage_business_card );
 80011ec:	4a0b      	ldr	r2, [pc, #44]	; (800121c <main+0x178>)
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff fa26 	bl	8000644 <EPD_DisplayFrame>
 80011f8:	2300      	movs	r3, #0


  /* USER CODE END 3 */

}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b00d      	add	sp, #52	; 0x34
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	08004034 	.word	0x08004034
 8001208:	08004048 	.word	0x08004048
 800120c:	20000028 	.word	0x20000028
 8001210:	0800404c 	.word	0x0800404c
 8001214:	20000020 	.word	0x20000020
 8001218:	080072b4 	.word	0x080072b4
 800121c:	08005c04 	.word	0x08005c04

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b096      	sub	sp, #88	; 0x58
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	2428      	movs	r4, #40	; 0x28
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0018      	movs	r0, r3
 800122c:	2330      	movs	r3, #48	; 0x30
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f002 fa43 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001236:	2518      	movs	r5, #24
 8001238:	197b      	adds	r3, r7, r5
 800123a:	0018      	movs	r0, r3
 800123c:	2310      	movs	r3, #16
 800123e:	001a      	movs	r2, r3
 8001240:	2100      	movs	r1, #0
 8001242:	f002 fa3b 	bl	80036bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	0018      	movs	r0, r3
 800124a:	2314      	movs	r3, #20
 800124c:	001a      	movs	r2, r3
 800124e:	2100      	movs	r1, #0
 8001250:	f002 fa34 	bl	80036bc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	0021      	movs	r1, r4
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2201      	movs	r2, #1
 8001260:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2210      	movs	r2, #16
 8001266:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2202      	movs	r2, #2
 800126c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	22a0      	movs	r2, #160	; 0xa0
 8001278:	0392      	lsls	r2, r2, #14
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	187b      	adds	r3, r7, r1
 8001284:	0018      	movs	r0, r3
 8001286:	f000 fe01 	bl	8001e8c <HAL_RCC_OscConfig>
  {

  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	0029      	movs	r1, r5
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2207      	movs	r2, #7
 8001290:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2202      	movs	r2, #2
 8001296:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2101      	movs	r1, #1
 80012a8:	0018      	movs	r0, r3
 80012aa:	f001 f90b 	bl	80024c4 <HAL_RCC_ClockConfig>
  {

  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 fa53 	bl	8002768 <HAL_RCCEx_PeriphCLKConfig>
  {

  }
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b016      	add	sp, #88	; 0x58
 80012c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <MX_SPI1_Init+0x70>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012d8:	2282      	movs	r2, #130	; 0x82
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012e6:	22e0      	movs	r2, #224	; 0xe0
 80012e8:	00d2      	lsls	r2, r2, #3
 80012ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI1_Init+0x6c>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <MX_SPI1_Init+0x6c>)
 8001302:	2238      	movs	r2, #56	; 0x38
 8001304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI1_Init+0x6c>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_SPI1_Init+0x6c>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI1_Init+0x6c>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_SPI1_Init+0x6c>)
 800131a:	2207      	movs	r2, #7
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI1_Init+0x6c>)
 8001320:	2200      	movs	r2, #0
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <MX_SPI1_Init+0x6c>)
 8001326:	2200      	movs	r2, #0
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132a:	4b03      	ldr	r3, [pc, #12]	; (8001338 <MX_SPI1_Init+0x6c>)
 800132c:	0018      	movs	r0, r3
 800132e:	f001 faf9 	bl	8002924 <HAL_SPI_Init>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000168 	.word	0x20000168
 800133c:	40013000 	.word	0x40013000

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <MX_USART1_UART_Init+0x54>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART1_UART_Init+0x50>)
 800134c:	2296      	movs	r2, #150	; 0x96
 800134e:	0212      	lsls	r2, r2, #8
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_USART1_UART_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART1_UART_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <MX_USART1_UART_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <MX_USART1_UART_Init+0x50>)
 8001384:	0018      	movs	r0, r3
 8001386:	f001 fe13 	bl	8002fb0 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000e8 	.word	0x200000e8
 8001394:	40013800 	.word	0x40013800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	2414      	movs	r4, #20
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	0018      	movs	r0, r3
 80013a4:	2314      	movs	r3, #20
 80013a6:	001a      	movs	r2, r3
 80013a8:	2100      	movs	r1, #0
 80013aa:	f002 f987 	bl	80036bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	4b61      	ldr	r3, [pc, #388]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0309      	lsls	r1, r1, #12
 80013b8:	430a      	orrs	r2, r1
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	031b      	lsls	r3, r3, #12
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	03c9      	lsls	r1, r1, #15
 80013d4:	430a      	orrs	r2, r1
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	03db      	lsls	r3, r3, #15
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b54      	ldr	r3, [pc, #336]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	4b53      	ldr	r3, [pc, #332]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0289      	lsls	r1, r1, #10
 80013f0:	430a      	orrs	r2, r1
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <MX_GPIO_Init+0x1a0>)
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	029b      	lsls	r3, r3, #10
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <MX_GPIO_Init+0x1a0>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <MX_GPIO_Init+0x1a0>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	02c9      	lsls	r1, r1, #11
 800140c:	430a      	orrs	r2, r1
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	4b49      	ldr	r3, [pc, #292]	; (8001538 <MX_GPIO_Init+0x1a0>)
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	02db      	lsls	r3, r3, #11
 8001418:	4013      	ands	r3, r2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_CS_GPIO_Port, E_CS_Pin, GPIO_PIN_SET);
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4846      	ldr	r0, [pc, #280]	; (800153c <MX_GPIO_Init+0x1a4>)
 8001424:	2201      	movs	r2, #1
 8001426:	0019      	movs	r1, r3
 8001428:	f000 fd13 	bl	8001e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_DC_GPIO_Port, E_DC_Pin, GPIO_PIN_RESET);
 800142c:	4b44      	ldr	r3, [pc, #272]	; (8001540 <MX_GPIO_Init+0x1a8>)
 800142e:	2200      	movs	r2, #0
 8001430:	2140      	movs	r1, #64	; 0x40
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fd0d 	bl	8001e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_RST_GPIO_Port, E_RST_Pin, GPIO_PIN_SET);
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4840      	ldr	r0, [pc, #256]	; (8001540 <MX_GPIO_Init+0x1a8>)
 800143e:	2201      	movs	r2, #1
 8001440:	0019      	movs	r1, r3
 8001442:	f000 fd06 	bl	8001e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001446:	193b      	adds	r3, r7, r4
 8001448:	220c      	movs	r2, #12
 800144a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2202      	movs	r2, #2
 8001450:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	193b      	adds	r3, r7, r4
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001458:	193b      	adds	r3, r7, r4
 800145a:	2203      	movs	r2, #3
 800145c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800145e:	193b      	adds	r3, r7, r4
 8001460:	2201      	movs	r2, #1
 8001462:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	193a      	adds	r2, r7, r4
 8001466:	2390      	movs	r3, #144	; 0x90
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f000 fb63 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_Pin P2_Pin E_BUSY_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P2_Pin|E_BUSY_Pin;
 8001472:	193b      	adds	r3, r7, r4
 8001474:	4a33      	ldr	r2, [pc, #204]	; (8001544 <MX_GPIO_Init+0x1ac>)
 8001476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	193b      	adds	r3, r7, r4
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	193b      	adds	r3, r7, r4
 8001480:	2201      	movs	r2, #1
 8001482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	193b      	adds	r3, r7, r4
 8001486:	4a2d      	ldr	r2, [pc, #180]	; (800153c <MX_GPIO_Init+0x1a4>)
 8001488:	0019      	movs	r1, r3
 800148a:	0010      	movs	r0, r2
 800148c:	f000 fb54 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_CS_Pin */
  GPIO_InitStruct.Pin = E_CS_Pin;
 8001490:	0021      	movs	r1, r4
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0212      	lsls	r2, r2, #8
 8001498:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2201      	movs	r2, #1
 800149e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E_CS_GPIO_Port, &GPIO_InitStruct);
 80014ac:	000c      	movs	r4, r1
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <MX_GPIO_Init+0x1a4>)
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f000 fb3f 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_DC_Pin */
  GPIO_InitStruct.Pin = E_DC_Pin;
 80014ba:	0021      	movs	r1, r4
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2201      	movs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E_DC_GPIO_Port, &GPIO_InitStruct);
 80014d4:	000c      	movs	r4, r1
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <MX_GPIO_Init+0x1a8>)
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f000 fb2b 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_RST_Pin */
  GPIO_InitStruct.Pin = E_RST_Pin;
 80014e2:	0021      	movs	r1, r4
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	0052      	lsls	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2201      	movs	r2, #1
 80014f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2203      	movs	r2, #3
 80014fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E_RST_GPIO_Port, &GPIO_InitStruct);
 80014fe:	000c      	movs	r4, r1
 8001500:	187b      	adds	r3, r7, r1
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <MX_GPIO_Init+0x1a8>)
 8001504:	0019      	movs	r1, r3
 8001506:	0010      	movs	r0, r2
 8001508:	f000 fb16 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin;
 800150c:	0021      	movs	r1, r4
 800150e:	187b      	adds	r3, r7, r1
 8001510:	22c0      	movs	r2, #192	; 0xc0
 8001512:	0152      	lsls	r2, r2, #5
 8001514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2201      	movs	r2, #1
 8001520:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	187a      	adds	r2, r7, r1
 8001524:	2390      	movs	r3, #144	; 0x90
 8001526:	05db      	lsls	r3, r3, #23
 8001528:	0011      	movs	r1, r2
 800152a:	0018      	movs	r0, r3
 800152c:	f000 fb04 	bl	8001b38 <HAL_GPIO_Init>

}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b00b      	add	sp, #44	; 0x2c
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800
 8001544:	00004006 	.word	0x00004006

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_MspInit+0x44>)
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_MspInit+0x44>)
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	619a      	str	r2, [r3, #24]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_MspInit+0x44>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2201      	movs	r2, #1
 8001560:	4013      	ands	r3, r2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_MspInit+0x44>)
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_MspInit+0x44>)
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0549      	lsls	r1, r1, #21
 8001570:	430a      	orrs	r2, r1
 8001572:	61da      	str	r2, [r3, #28]
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_MspInit+0x44>)
 8001576:	69da      	ldr	r2, [r3, #28]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	4013      	ands	r3, r2
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	2314      	movs	r3, #20
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	0018      	movs	r0, r3
 800159e:	2314      	movs	r3, #20
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f002 f88a 	bl	80036bc <memset>
  if(hspi->Instance==SPI1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <HAL_SPI_MspInit+0xd8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d156      	bne.n	8001660 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0149      	lsls	r1, r1, #5
 80015bc:	430a      	orrs	r2, r1
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0289      	lsls	r1, r1, #10
 80015d8:	430a      	orrs	r2, r1
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	02c9      	lsls	r1, r1, #11
 80015f4:	430a      	orrs	r2, r1
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_SPI_MspInit+0xdc>)
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	02db      	lsls	r3, r3, #11
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001606:	2414      	movs	r4, #20
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2202      	movs	r2, #2
 8001612:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	193b      	adds	r3, r7, r4
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	193b      	adds	r3, r7, r4
 800161c:	2203      	movs	r2, #3
 800161e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001620:	193b      	adds	r3, r7, r4
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	193a      	adds	r2, r7, r4
 8001628:	2390      	movs	r3, #144	; 0x90
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	0011      	movs	r1, r2
 800162e:	0018      	movs	r0, r3
 8001630:	f000 fa82 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001634:	0021      	movs	r1, r4
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2208      	movs	r2, #8
 800163a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2202      	movs	r2, #2
 8001640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2203      	movs	r2, #3
 800164c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	187b      	adds	r3, r7, r1
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_SPI_MspInit+0xe0>)
 8001658:	0019      	movs	r1, r3
 800165a:	0010      	movs	r0, r2
 800165c:	f000 fa6c 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b00b      	add	sp, #44	; 0x2c
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	40013000 	.word	0x40013000
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	2314      	movs	r3, #20
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	0018      	movs	r0, r3
 8001682:	2314      	movs	r3, #20
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f002 f818 	bl	80036bc <memset>
  if(huart->Instance==USART1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_UART_MspInit+0x94>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d133      	bne.n	80016fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_UART_MspInit+0x98>)
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_UART_MspInit+0x98>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	01c9      	lsls	r1, r1, #7
 80016a0:	430a      	orrs	r2, r1
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_UART_MspInit+0x98>)
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_UART_MspInit+0x98>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x98>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0289      	lsls	r1, r1, #10
 80016bc:	430a      	orrs	r2, r1
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_UART_MspInit+0x98>)
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ce:	2114      	movs	r1, #20
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	22c0      	movs	r2, #192	; 0xc0
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2202      	movs	r2, #2
 80016dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	2203      	movs	r2, #3
 80016e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2201      	movs	r2, #1
 80016ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	187a      	adds	r2, r7, r1
 80016f2:	2390      	movs	r3, #144	; 0x90
 80016f4:	05db      	lsls	r3, r3, #23
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 fa1d 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b00a      	add	sp, #40	; 0x28
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40013800 	.word	0x40013800
 800170c:	40021000 	.word	0x40021000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f90c 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e00a      	b.n	800176a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001754:	e000      	b.n	8001758 <_read+0x16>
 8001756:	bf00      	nop
 8001758:	0001      	movs	r1, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf0      	blt.n	8001754 <_read+0x12>
	}

return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b006      	add	sp, #24
 800177a:	bd80      	pop	{r7, pc}

0800177c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e009      	b.n	80017a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	60ba      	str	r2, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0018      	movs	r0, r3
 8001798:	e000      	b.n	800179c <_write+0x20>
 800179a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf1      	blt.n	800178e <_write+0x12>
	}
	return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b006      	add	sp, #24
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_close>:

int _close(int file)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	return -1;
 80017bc:	2301      	movs	r3, #1
 80017be:	425b      	negs	r3, r3
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	0192      	lsls	r2, r2, #6
 80017d8:	605a      	str	r2, [r3, #4]
	return 0;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_isatty>:

int _isatty(int file)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
	return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bd80      	pop	{r7, pc}

0800180c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x50>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x16>
		heap_end = &end;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <_sbrk+0x50>)
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <_sbrk+0x54>)
 8001820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <_sbrk+0x50>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <_sbrk+0x50>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	18d3      	adds	r3, r2, r3
 8001830:	466a      	mov	r2, sp
 8001832:	4293      	cmp	r3, r2
 8001834:	d907      	bls.n	8001846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001836:	f001 ff0d 	bl	8003654 <__errno>
 800183a:	0003      	movs	r3, r0
 800183c:	220c      	movs	r2, #12
 800183e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001840:	2301      	movs	r3, #1
 8001842:	425b      	negs	r3, r3
 8001844:	e006      	b.n	8001854 <_sbrk+0x48>
	}

	heap_end += incr;
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <_sbrk+0x50>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	18d2      	adds	r2, r2, r3
 800184e:	4b03      	ldr	r3, [pc, #12]	; (800185c <_sbrk+0x50>)
 8001850:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000bc 	.word	0x200000bc
 8001860:	200001d8 	.word	0x200001d8

08001864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001872:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001876:	490e      	ldr	r1, [pc, #56]	; (80018b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <LoopForever+0xe>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800188c:	4c0b      	ldr	r4, [pc, #44]	; (80018bc <LoopForever+0x16>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800189a:	f7ff ffe3 	bl	8001864 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800189e:	f001 fedf 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a2:	f7ff fbff 	bl	80010a4 <main>

080018a6 <LoopForever>:

LoopForever:
    b LoopForever
 80018a6:	e7fe      	b.n	80018a6 <LoopForever>
  ldr   r0, =_estack
 80018a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80018b4:	080089e8 	.word	0x080089e8
  ldr r2, =_sbss
 80018b8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80018bc:	200001d4 	.word	0x200001d4

080018c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_COMP_IRQHandler>
	...

080018c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_Init+0x24>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_Init+0x24>)
 80018ce:	2110      	movs	r1, #16
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f000 f809 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018da:	f7ff fe35 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_InitTick+0x5c>)
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_InitTick+0x60>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	0019      	movs	r1, r3
 80018fe:	23fa      	movs	r3, #250	; 0xfa
 8001900:	0098      	lsls	r0, r3, #2
 8001902:	f7fe fc01 	bl	8000108 <__udivsi3>
 8001906:	0003      	movs	r3, r0
 8001908:	0019      	movs	r1, r3
 800190a:	0020      	movs	r0, r4
 800190c:	f7fe fbfc 	bl	8000108 <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f903 	bl	8001b1e <HAL_SYSTICK_Config>
 8001918:	1e03      	subs	r3, r0, #0
 800191a:	d001      	beq.n	8001920 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e00f      	b.n	8001940 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d80b      	bhi.n	800193e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	2301      	movs	r3, #1
 800192a:	425b      	negs	r3, r3
 800192c:	2200      	movs	r2, #0
 800192e:	0018      	movs	r0, r3
 8001930:	f000 f8e0 	bl	8001af4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_InitTick+0x64>)
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b003      	add	sp, #12
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	20000030 	.word	0x20000030
 800194c:	20000038 	.word	0x20000038
 8001950:	20000034 	.word	0x20000034

08001954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x1c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	001a      	movs	r2, r3
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x20>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	18d2      	adds	r2, r2, r3
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_IncTick+0x20>)
 8001966:	601a      	str	r2, [r3, #0]
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	20000038 	.word	0x20000038
 8001974:	200001cc 	.word	0x200001cc

08001978 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_GetTick+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	200001cc 	.word	0x200001cc

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fff0 	bl	8001978 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_Delay+0x40>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	001a      	movs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	189b      	adds	r3, r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	f7ff ffe0 	bl	8001978 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000038 	.word	0x20000038

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	0002      	movs	r2, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b7f      	cmp	r3, #127	; 0x7f
 80019e4:	d828      	bhi.n	8001a38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e6:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <__NVIC_SetPriority+0xd4>)
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	33c0      	adds	r3, #192	; 0xc0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	589b      	ldr	r3, [r3, r2]
 80019f6:	1dfa      	adds	r2, r7, #7
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	0011      	movs	r1, r2
 80019fc:	2203      	movs	r2, #3
 80019fe:	400a      	ands	r2, r1
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	21ff      	movs	r1, #255	; 0xff
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	22ff      	movs	r2, #255	; 0xff
 8001a14:	401a      	ands	r2, r3
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	4003      	ands	r3, r0
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a24:	481f      	ldr	r0, [pc, #124]	; (8001aa4 <__NVIC_SetPriority+0xd4>)
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	33c0      	adds	r3, #192	; 0xc0
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a36:	e031      	b.n	8001a9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <__NVIC_SetPriority+0xd8>)
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	0019      	movs	r1, r3
 8001a40:	230f      	movs	r3, #15
 8001a42:	400b      	ands	r3, r1
 8001a44:	3b08      	subs	r3, #8
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3306      	adds	r3, #6
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	3304      	adds	r3, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	1dfa      	adds	r2, r7, #7
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	0011      	movs	r1, r2
 8001a58:	2203      	movs	r2, #3
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	00d2      	lsls	r2, r2, #3
 8001a5e:	21ff      	movs	r1, #255	; 0xff
 8001a60:	4091      	lsls	r1, r2
 8001a62:	000a      	movs	r2, r1
 8001a64:	43d2      	mvns	r2, r2
 8001a66:	401a      	ands	r2, r3
 8001a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	401a      	ands	r2, r3
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	0018      	movs	r0, r3
 8001a78:	2303      	movs	r3, #3
 8001a7a:	4003      	ands	r3, r0
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <__NVIC_SetPriority+0xd8>)
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	001c      	movs	r4, r3
 8001a88:	230f      	movs	r3, #15
 8001a8a:	4023      	ands	r3, r4
 8001a8c:	3b08      	subs	r3, #8
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	430a      	orrs	r2, r1
 8001a92:	3306      	adds	r3, #6
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	18c3      	adds	r3, r0, r3
 8001a98:	3304      	adds	r3, #4
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b003      	add	sp, #12
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <SysTick_Config+0x40>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e010      	b.n	8001ae4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <SysTick_Config+0x44>)
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	2301      	movs	r3, #1
 8001acc:	425b      	negs	r3, r3
 8001ace:	2103      	movs	r1, #3
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff ff7d 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SysTick_Config+0x44>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x44>)
 8001ade:	2207      	movs	r2, #7
 8001ae0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	00ffffff 	.word	0x00ffffff
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	210f      	movs	r1, #15
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	1c02      	adds	r2, r0, #0
 8001b04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b004      	add	sp, #16
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff ffbf 	bl	8001aac <SysTick_Config>
 8001b2e:	0003      	movs	r3, r0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e14f      	b.n	8001de8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4091      	lsls	r1, r2
 8001b52:	000a      	movs	r2, r1
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d100      	bne.n	8001b60 <HAL_GPIO_Init+0x28>
 8001b5e:	e140      	b.n	8001de2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x38>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	58d3      	ldr	r3, [r2, r3]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2207      	movs	r2, #7
 8001b82:	4013      	ands	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2107      	movs	r1, #7
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d00b      	beq.n	8001c0c <HAL_GPIO_Init+0xd4>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	d130      	bne.n	8001c6e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c42:	2201      	movs	r2, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	2201      	movs	r2, #1
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	055b      	lsls	r3, r3, #21
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d100      	bne.n	8001cac <HAL_GPIO_Init+0x174>
 8001caa:	e09a      	b.n	8001de2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cac:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	589b      	ldr	r3, [r3, r2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	2390      	movs	r3, #144	; 0x90
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x1de>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a43      	ldr	r2, [pc, #268]	; (8001e0c <HAL_GPIO_Init+0x2d4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x1da>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a42      	ldr	r2, [pc, #264]	; (8001e10 <HAL_GPIO_Init+0x2d8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x1d6>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	2103      	movs	r1, #3
 8001d20:	400a      	ands	r2, r1
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	4013      	ands	r3, r2
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43da      	mvns	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	035b      	lsls	r3, r3, #13
 8001da6:	4013      	ands	r3, r2
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	039b      	lsls	r3, r3, #14
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_GPIO_Init+0x2dc>)
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	40da      	lsrs	r2, r3
 8001df0:	1e13      	subs	r3, r2, #0
 8001df2:	d000      	beq.n	8001df6 <HAL_GPIO_Init+0x2be>
 8001df4:	e6a8      	b.n	8001b48 <HAL_GPIO_Init+0x10>
  } 
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b006      	add	sp, #24
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000
 8001e08:	48000400 	.word	0x48000400
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	48000c00 	.word	0x48000c00
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	000a      	movs	r2, r1
 8001e22:	1cbb      	adds	r3, r7, #2
 8001e24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	1cba      	adds	r2, r7, #2
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
  }
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	0008      	movs	r0, r1
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	1cbb      	adds	r3, r7, #2
 8001e60:	1c02      	adds	r2, r0, #0
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	1c7b      	adds	r3, r7, #1
 8001e66:	1c0a      	adds	r2, r1, #0
 8001e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6a:	1c7b      	adds	r3, r7, #1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e72:	1cbb      	adds	r3, r7, #2
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e303      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCC_OscConfig+0x1e>
 8001ea8:	e08d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eaa:	4bc4      	ldr	r3, [pc, #784]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	220c      	movs	r2, #12
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb6:	4bc1      	ldr	r3, [pc, #772]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64>
 8001ec2:	4bbe      	ldr	r3, [pc, #760]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	401a      	ands	r2, r3
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	4bb9      	ldr	r3, [pc, #740]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	029b      	lsls	r3, r3, #10
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x56>
 8001ee0:	e070      	b.n	8001fc4 <HAL_RCC_OscConfig+0x138>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d000      	beq.n	8001eec <HAL_RCC_OscConfig+0x60>
 8001eea:	e06b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e2da      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x7c>
 8001ef8:	4bb0      	ldr	r3, [pc, #704]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4baf      	ldr	r3, [pc, #700]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0249      	lsls	r1, r1, #9
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e02f      	b.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x9e>
 8001f10:	4baa      	ldr	r3, [pc, #680]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4ba9      	ldr	r3, [pc, #676]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f16:	49aa      	ldr	r1, [pc, #680]	; (80021c0 <HAL_RCC_OscConfig+0x334>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4ba7      	ldr	r3, [pc, #668]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4ba6      	ldr	r3, [pc, #664]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f22:	49a8      	ldr	r1, [pc, #672]	; (80021c4 <HAL_RCC_OscConfig+0x338>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e01e      	b.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10e      	bne.n	8001f50 <HAL_RCC_OscConfig+0xc4>
 8001f32:	4ba2      	ldr	r3, [pc, #648]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4ba1      	ldr	r3, [pc, #644]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	02c9      	lsls	r1, r1, #11
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	4b9e      	ldr	r3, [pc, #632]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b9d      	ldr	r3, [pc, #628]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0249      	lsls	r1, r1, #9
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f50:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b99      	ldr	r3, [pc, #612]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f56:	499a      	ldr	r1, [pc, #616]	; (80021c0 <HAL_RCC_OscConfig+0x334>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4b97      	ldr	r3, [pc, #604]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b96      	ldr	r3, [pc, #600]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f62:	4998      	ldr	r1, [pc, #608]	; (80021c4 <HAL_RCC_OscConfig+0x338>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d014      	beq.n	8001f9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fd02 	bl	8001978 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fcfd 	bl	8001978 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e28c      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8c:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0xee>
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fced 	bl	8001978 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fce8 	bl	8001978 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e277      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x118>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x146>
 8001fd0:	e069      	b.n	80020a6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d00b      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fdc:	4b77      	ldr	r3, [pc, #476]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d11c      	bne.n	8002022 <HAL_RCC_OscConfig+0x196>
 8001fe8:	4b74      	ldr	r3, [pc, #464]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d116      	bne.n	8002022 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff4:	4b71      	ldr	r3, [pc, #452]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x17e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e24d      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	22f8      	movs	r2, #248	; 0xf8
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00da      	lsls	r2, r3, #3
 800201a:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002020:	e041      	b.n	80020a6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d024      	beq.n	8002074 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202a:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fc9f 	bl	8001978 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fc9a 	bl	8001978 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e229      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0f1      	beq.n	8002040 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	22f8      	movs	r2, #248	; 0xf8
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00da      	lsls	r2, r3, #3
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002074:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fc7a 	bl	8001978 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff fc75 	bl	8001978 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e204      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	4013      	ands	r3, r2
 80020ae:	d036      	beq.n	800211e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc58 	bl	8001978 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff fc53 	bl	8001978 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1e2      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e0:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f1      	beq.n	80020ce <HAL_RCC_OscConfig+0x242>
 80020ea:	e018      	b.n	800211e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b33      	ldr	r3, [pc, #204]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fc3e 	bl	8001978 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff fc39 	bl	8001978 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1c8      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d1f1      	bne.n	8002102 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x29e>
 8002128:	e0b6      	b.n	8002298 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	231f      	movs	r3, #31
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	055b      	lsls	r3, r3, #21
 800213a:	4013      	ands	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0549      	lsls	r1, r1, #21
 8002148:	430a      	orrs	r2, r1
 800214a:	61da      	str	r2, [r3, #28]
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	055b      	lsls	r3, r3, #21
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_OscConfig+0x33c>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d11a      	bne.n	80021a4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCC_OscConfig+0x33c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_RCC_OscConfig+0x33c>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0049      	lsls	r1, r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217c:	f7ff fbfc 	bl	8001978 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff fbf7 	bl	8001978 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e186      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x33c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10f      	bne.n	80021cc <HAL_RCC_OscConfig+0x340>
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80021ae:	6a1a      	ldr	r2, [r3, #32]
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	430a      	orrs	r2, r1
 80021b6:	621a      	str	r2, [r3, #32]
 80021b8:	e036      	b.n	8002228 <HAL_RCC_OscConfig+0x39c>
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	fffeffff 	.word	0xfffeffff
 80021c4:	fffbffff 	.word	0xfffbffff
 80021c8:	40007000 	.word	0x40007000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x362>
 80021d4:	4bb6      	ldr	r3, [pc, #728]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	4bb5      	ldr	r3, [pc, #724]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	621a      	str	r2, [r3, #32]
 80021e0:	4bb3      	ldr	r3, [pc, #716]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	4bb2      	ldr	r3, [pc, #712]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	621a      	str	r2, [r3, #32]
 80021ec:	e01c      	b.n	8002228 <HAL_RCC_OscConfig+0x39c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x384>
 80021f6:	4bae      	ldr	r3, [pc, #696]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	4bad      	ldr	r3, [pc, #692]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80021fc:	2104      	movs	r1, #4
 80021fe:	430a      	orrs	r2, r1
 8002200:	621a      	str	r2, [r3, #32]
 8002202:	4bab      	ldr	r3, [pc, #684]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	4baa      	ldr	r3, [pc, #680]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	621a      	str	r2, [r3, #32]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0x39c>
 8002210:	4ba7      	ldr	r3, [pc, #668]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	4ba6      	ldr	r3, [pc, #664]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	621a      	str	r2, [r3, #32]
 800221c:	4ba4      	ldr	r3, [pc, #656]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	4ba3      	ldr	r3, [pc, #652]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002222:	2104      	movs	r1, #4
 8002224:	438a      	bics	r2, r1
 8002226:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d014      	beq.n	800225a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff fba2 	bl	8001978 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e009      	b.n	800224e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff fb9d 	bl	8001978 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a9b      	ldr	r2, [pc, #620]	; (80024b4 <HAL_RCC_OscConfig+0x628>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e12b      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	4b98      	ldr	r3, [pc, #608]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x3ae>
 8002258:	e013      	b.n	8002282 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb8d 	bl	8001978 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002262:	e009      	b.n	8002278 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7ff fb88 	bl	8001978 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	4a91      	ldr	r2, [pc, #580]	; (80024b4 <HAL_RCC_OscConfig+0x628>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e116      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b8d      	ldr	r3, [pc, #564]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002282:	231f      	movs	r3, #31
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002292:	4989      	ldr	r1, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x62c>)
 8002294:	400a      	ands	r2, r1
 8002296:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2210      	movs	r2, #16
 800229e:	4013      	ands	r3, r2
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d12a      	bne.n	8002300 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022aa:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ae:	4b80      	ldr	r3, [pc, #512]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022b0:	2104      	movs	r1, #4
 80022b2:	430a      	orrs	r2, r1
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022b6:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	4b7d      	ldr	r3, [pc, #500]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022bc:	2101      	movs	r1, #1
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff fb59 	bl	8001978 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022cc:	f7ff fb54 	bl	8001978 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0e3      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d0f1      	beq.n	80022cc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022e8:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	22f8      	movs	r2, #248	; 0xf8
 80022ee:	4393      	bics	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	00da      	lsls	r2, r3, #3
 80022f8:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
 80022fe:	e034      	b.n	800236a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	3305      	adds	r3, #5
 8002306:	d111      	bne.n	800232c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002308:	4b69      	ldr	r3, [pc, #420]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800230a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800230e:	2104      	movs	r1, #4
 8002310:	438a      	bics	r2, r1
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002318:	22f8      	movs	r2, #248	; 0xf8
 800231a:	4393      	bics	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	00da      	lsls	r2, r3, #3
 8002324:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002326:	430a      	orrs	r2, r1
 8002328:	635a      	str	r2, [r3, #52]	; 0x34
 800232a:	e01e      	b.n	800236a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800232c:	4b60      	ldr	r3, [pc, #384]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800232e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002330:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002332:	2104      	movs	r1, #4
 8002334:	430a      	orrs	r2, r1
 8002336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800233e:	2101      	movs	r1, #1
 8002340:	438a      	bics	r2, r1
 8002342:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7ff fb18 	bl	8001978 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800234e:	f7ff fb13 	bl	8001978 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0a2      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	2202      	movs	r2, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d1f1      	bne.n	800234e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d100      	bne.n	8002374 <HAL_RCC_OscConfig+0x4e8>
 8002372:	e097      	b.n	80024a4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	220c      	movs	r2, #12
 800237a:	4013      	ands	r3, r2
 800237c:	2b08      	cmp	r3, #8
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x4f6>
 8002380:	e06b      	b.n	800245a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d14c      	bne.n	8002424 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002390:	494a      	ldr	r1, [pc, #296]	; (80024bc <HAL_RCC_OscConfig+0x630>)
 8002392:	400a      	ands	r2, r1
 8002394:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7ff faef 	bl	8001978 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff faea 	bl	8001978 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e079      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	049b      	lsls	r3, r3, #18
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	220f      	movs	r2, #15
 80023c4:	4393      	bics	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_RCC_OscConfig+0x634>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	431a      	orrs	r2, r3
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0449      	lsls	r1, r1, #17
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff fabd 	bl	8001978 <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff fab8 	bl	8001978 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e047      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	049b      	lsls	r3, r3, #18
 800241e:	4013      	ands	r3, r2
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x578>
 8002422:	e03f      	b.n	80024a4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800242a:	4924      	ldr	r1, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x630>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff faa2 	bl	8001978 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff fa9d 	bl	8001978 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e02c      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	049b      	lsls	r3, r3, #18
 8002454:	4013      	ands	r3, r2
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x5ae>
 8002458:	e024      	b.n	80024a4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e01f      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	401a      	ands	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	429a      	cmp	r2, r3
 8002480:	d10e      	bne.n	80024a0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	220f      	movs	r2, #15
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	23f0      	movs	r3, #240	; 0xf0
 8002494:	039b      	lsls	r3, r3, #14
 8002496:	401a      	ands	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b008      	add	sp, #32
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	40021000 	.word	0x40021000
 80024b4:	00001388 	.word	0x00001388
 80024b8:	efffffff 	.word	0xefffffff
 80024bc:	feffffff 	.word	0xfeffffff
 80024c0:	ffc2ffff 	.word	0xffc2ffff

080024c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b3      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d911      	bls.n	800250a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4393      	bics	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	4b55      	ldr	r3, [pc, #340]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e09a      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2202      	movs	r2, #2
 8002510:	4013      	ands	r3, r2
 8002512:	d015      	beq.n	8002540 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2204      	movs	r2, #4
 800251a:	4013      	ands	r3, r2
 800251c:	d006      	beq.n	800252c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800251e:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4b4a      	ldr	r3, [pc, #296]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 8002524:	21e0      	movs	r1, #224	; 0xe0
 8002526:	00c9      	lsls	r1, r1, #3
 8002528:	430a      	orrs	r2, r1
 800252a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	22f0      	movs	r2, #240	; 0xf0
 8002532:	4393      	bics	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	4b44      	ldr	r3, [pc, #272]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	d040      	beq.n	80025cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	029b      	lsls	r3, r3, #10
 800255a:	4013      	ands	r3, r2
 800255c:	d114      	bne.n	8002588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06e      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	049b      	lsls	r3, r3, #18
 8002572:	4013      	ands	r3, r2
 8002574:	d108      	bne.n	8002588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e062      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e05b      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002588:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2203      	movs	r2, #3
 800258e:	4393      	bics	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff f9ec 	bl	8001978 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a4:	e009      	b.n	80025ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a6:	f7ff f9e7 	bl	8001978 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	4a27      	ldr	r2, [pc, #156]	; (8002650 <HAL_RCC_ClockConfig+0x18c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e042      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	220c      	movs	r2, #12
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1ec      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d211      	bcs.n	80025fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4393      	bics	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e020      	b.n	8002640 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2204      	movs	r2, #4
 8002604:	4013      	ands	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a11      	ldr	r2, [pc, #68]	; (8002654 <HAL_RCC_ClockConfig+0x190>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800261c:	f000 f820 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002620:	0001      	movs	r1, r0
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	220f      	movs	r2, #15
 800262a:	4013      	ands	r3, r2
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x194>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	000a      	movs	r2, r1
 8002632:	40da      	lsrs	r2, r3
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x198>)
 8002636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff f957 	bl	80018ec <HAL_InitTick>
  
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	00001388 	.word	0x00001388
 8002654:	fffff8ff 	.word	0xfffff8ff
 8002658:	08008964 	.word	0x08008964
 800265c:	20000030 	.word	0x20000030

08002660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b08f      	sub	sp, #60	; 0x3c
 8002664:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002666:	2314      	movs	r3, #20
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800266e:	c313      	stmia	r3!, {r0, r1, r4}
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002678:	ca13      	ldmia	r2!, {r0, r1, r4}
 800267a:	c313      	stmia	r3!, {r0, r1, r4}
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
 8002688:	2300      	movs	r3, #0
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	220c      	movs	r2, #12
 800269e:	4013      	ands	r3, r2
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d002      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x4a>
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d003      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x50>
 80026a8:	e02d      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026ae:	e02d      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	0c9b      	lsrs	r3, r3, #18
 80026b4:	220f      	movs	r2, #15
 80026b6:	4013      	ands	r3, r2
 80026b8:	2214      	movs	r2, #20
 80026ba:	18ba      	adds	r2, r7, r2
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	220f      	movs	r2, #15
 80026c6:	4013      	ands	r3, r2
 80026c8:	1d3a      	adds	r2, r7, #4
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	4013      	ands	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026da:	4812      	ldr	r0, [pc, #72]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026dc:	f7fd fd14 	bl	8000108 <__udivsi3>
 80026e0:	0003      	movs	r3, r0
 80026e2:	001a      	movs	r2, r3
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	4353      	muls	r3, r2
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ea:	e009      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	000a      	movs	r2, r1
 80026f0:	0152      	lsls	r2, r2, #5
 80026f2:	1a52      	subs	r2, r2, r1
 80026f4:	0193      	lsls	r3, r2, #6
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	185b      	adds	r3, r3, r1
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002704:	e002      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b00f      	add	sp, #60	; 0x3c
 8002714:	bd90      	pop	{r4, r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	08004050 	.word	0x08004050
 800271c:	08004060 	.word	0x08004060
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	20000030 	.word	0x20000030

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	0001      	movs	r1, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	2207      	movs	r2, #7
 800274e:	4013      	ands	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	40d9      	lsrs	r1, r3
 8002756:	000b      	movs	r3, r1
}    
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	40021000 	.word	0x40021000
 8002764:	08008974 	.word	0x08008974

08002768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	4013      	ands	r3, r2
 8002782:	d100      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002784:	e08f      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2317      	movs	r3, #23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b5f      	ldr	r3, [pc, #380]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	055b      	lsls	r3, r3, #21
 8002796:	4013      	ands	r3, r2
 8002798:	d111      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0549      	lsls	r1, r1, #21
 80027a4:	430a      	orrs	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
 80027a8:	4b58      	ldr	r3, [pc, #352]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2317      	movs	r3, #23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	d11a      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b51      	ldr	r3, [pc, #324]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0049      	lsls	r1, r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7ff f8ce 	bl	8001978 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7ff f8c9 	bl	8001978 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e087      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002800:	4b42      	ldr	r3, [pc, #264]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d034      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4013      	ands	r3, r2
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	429a      	cmp	r2, r3
 8002820:	d02c      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002822:	4b3a      	ldr	r3, [pc, #232]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0249      	lsls	r1, r1, #9
 8002836:	430a      	orrs	r2, r1
 8002838:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002840:	4935      	ldr	r1, [pc, #212]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002842:	400a      	ands	r2, r1
 8002844:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff f890 	bl	8001978 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff f88b 	bl	8001978 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4a2c      	ldr	r2, [pc, #176]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e048      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	2202      	movs	r2, #2
 8002878:	4013      	ands	r3, r2
 800287a:	d0f0      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002882:	4013      	ands	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800288c:	430a      	orrs	r2, r1
 800288e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002890:	2317      	movs	r3, #23
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028a0:	491f      	ldr	r1, [pc, #124]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	2203      	movs	r2, #3
 80028b6:	4393      	bics	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2220      	movs	r2, #32
 80028ca:	4013      	ands	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2210      	movs	r2, #16
 80028d4:	4393      	bics	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
 8002914:	fffffcff 	.word	0xfffffcff
 8002918:	fffeffff 	.word	0xfffeffff
 800291c:	00001388 	.word	0x00001388
 8002920:	efffffff 	.word	0xefffffff

08002924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e08a      	b.n	8002a4c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	225d      	movs	r2, #93	; 0x5d
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	225c      	movs	r2, #92	; 0x5c
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f7fe fe1c 	bl	8001590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	225d      	movs	r2, #93	; 0x5d
 800295c:	2102      	movs	r1, #2
 800295e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	438a      	bics	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	23e0      	movs	r3, #224	; 0xe0
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	429a      	cmp	r2, r3
 800297a:	d902      	bls.n	8002982 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e002      	b.n	8002988 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	015b      	lsls	r3, r3, #5
 8002986:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	23f0      	movs	r3, #240	; 0xf0
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	429a      	cmp	r2, r3
 8002992:	d008      	beq.n	80029a6 <HAL_SPI_Init+0x82>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	23e0      	movs	r3, #224	; 0xe0
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	429a      	cmp	r2, r3
 800299e:	d002      	beq.n	80029a6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	23e0      	movs	r3, #224	; 0xe0
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d903      	bls.n	80029c2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
 80029c0:	e002      	b.n	80029c8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	400b      	ands	r3, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	0011      	movs	r1, r2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	0011      	movs	r1, r2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4907      	ldr	r1, [pc, #28]	; (8002a54 <HAL_SPI_Init+0x130>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	225d      	movs	r2, #93	; 0x5d
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	fffff7ff 	.word	0xfffff7ff

08002a58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a68:	231f      	movs	r3, #31
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	225c      	movs	r2, #92	; 0x5c
 8002a74:	5c9b      	ldrb	r3, [r3, r2]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_SPI_Transmit+0x26>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e169      	b.n	8002d52 <HAL_SPI_Transmit+0x2fa>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	225c      	movs	r2, #92	; 0x5c
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a86:	f7fe ff77 	bl	8001978 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a8e:	2316      	movs	r3, #22
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	1dba      	adds	r2, r7, #6
 8002a94:	8812      	ldrh	r2, [r2, #0]
 8002a96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	225d      	movs	r2, #93	; 0x5d
 8002a9c:	5c9b      	ldrb	r3, [r3, r2]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d004      	beq.n	8002aae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002aac:	e146      	b.n	8002d3c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_SPI_Transmit+0x64>
 8002ab4:	1dbb      	adds	r3, r7, #6
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002abc:	231f      	movs	r3, #31
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ac4:	e13a      	b.n	8002d3c <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	225d      	movs	r2, #93	; 0x5d
 8002aca:	2103      	movs	r1, #3
 8002acc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1dba      	adds	r2, r7, #6
 8002ade:	8812      	ldrh	r2, [r2, #0]
 8002ae0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1dba      	adds	r2, r7, #6
 8002ae6:	8812      	ldrh	r2, [r2, #0]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2244      	movs	r2, #68	; 0x44
 8002af4:	2100      	movs	r1, #0
 8002af6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2246      	movs	r2, #70	; 0x46
 8002afc:	2100      	movs	r1, #0
 8002afe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d108      	bne.n	8002b2a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	01c9      	lsls	r1, r1, #7
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d007      	beq.n	8002b48 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	23e0      	movs	r3, #224	; 0xe0
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d94e      	bls.n	8002bf2 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_SPI_Transmit+0x10e>
 8002b5c:	2316      	movs	r3, #22
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d13f      	bne.n	8002be6 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b8a:	e02c      	b.n	8002be6 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2202      	movs	r2, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d112      	bne.n	8002bc0 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bbe:	e012      	b.n	8002be6 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc0:	f7fe feda 	bl	8001978 <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d802      	bhi.n	8002bd6 <HAL_SPI_Transmit+0x17e>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_SPI_Transmit+0x184>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002bdc:	231f      	movs	r3, #31
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2203      	movs	r2, #3
 8002be2:	701a      	strb	r2, [r3, #0]
          goto error;
 8002be4:	e0aa      	b.n	8002d3c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1cd      	bne.n	8002b8c <HAL_SPI_Transmit+0x134>
 8002bf0:	e080      	b.n	8002cf4 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_SPI_Transmit+0x1ae>
 8002bfa:	2316      	movs	r3, #22
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d000      	beq.n	8002c06 <HAL_SPI_Transmit+0x1ae>
 8002c04:	e071      	b.n	8002cea <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d912      	bls.n	8002c36 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	881a      	ldrh	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	1c9a      	adds	r2, r3, #2
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b02      	subs	r3, #2
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c34:	e059      	b.n	8002cea <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c5c:	e045      	b.n	8002cea <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d12b      	bne.n	8002cc4 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d912      	bls.n	8002c9c <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	1c9a      	adds	r2, r3, #2
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b02      	subs	r3, #2
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c9a:	e026      	b.n	8002cea <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc2:	e012      	b.n	8002cea <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc4:	f7fe fe58 	bl	8001978 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d802      	bhi.n	8002cda <HAL_SPI_Transmit+0x282>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_SPI_Transmit+0x288>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002ce0:	231f      	movs	r3, #31
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ce8:	e028      	b.n	8002d3c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1b4      	bne.n	8002c5e <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f912 	bl	8002f24 <SPI_EndRxTxTransaction>
 8002d00:	1e03      	subs	r3, r0, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002d30:	231f      	movs	r3, #31
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e000      	b.n	8002d3c <HAL_SPI_Transmit+0x2e4>
  }

error:
 8002d3a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	225d      	movs	r2, #93	; 0x5d
 8002d40:	2101      	movs	r1, #1
 8002d42:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	225c      	movs	r2, #92	; 0x5c
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d4c:	231f      	movs	r3, #31
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	781b      	ldrb	r3, [r3, #0]
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b008      	add	sp, #32
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d6c:	e050      	b.n	8002e10 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	d04d      	beq.n	8002e10 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d74:	f7fe fe00 	bl	8001978 <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d902      	bls.n	8002d8a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d142      	bne.n	8002e10 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	21e0      	movs	r1, #224	; 0xe0
 8002d96:	438a      	bics	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	2382      	movs	r3, #130	; 0x82
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d113      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0x72>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d005      	beq.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d107      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2140      	movs	r1, #64	; 0x40
 8002dca:	438a      	bics	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d110      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4914      	ldr	r1, [pc, #80]	; (8002e38 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0189      	lsls	r1, r1, #6
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	225d      	movs	r2, #93	; 0x5d
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	225c      	movs	r2, #92	; 0x5c
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e00f      	b.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	425a      	negs	r2, r3
 8002e20:	4153      	adcs	r3, r2
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	001a      	movs	r2, r3
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d19f      	bne.n	8002d6e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	ffffdfff 	.word	0xffffdfff

08002e3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e4a:	e05c      	b.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	23c0      	movs	r3, #192	; 0xc0
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d106      	bne.n	8002e64 <SPI_WaitFifoStateUntilTimeout+0x28>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	d04d      	beq.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e6a:	f7fe fd85 	bl	8001978 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d902      	bls.n	8002e80 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d142      	bne.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	21e0      	movs	r1, #224	; 0xe0
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	2382      	movs	r3, #130	; 0x82
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d113      	bne.n	8002ec4 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d005      	beq.n	8002eb4 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2140      	movs	r1, #64	; 0x40
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	019b      	lsls	r3, r3, #6
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d110      	bne.n	8002ef2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4911      	ldr	r1, [pc, #68]	; (8002f20 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	0189      	lsls	r1, r1, #6
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	225d      	movs	r2, #93	; 0x5d
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	225c      	movs	r2, #92	; 0x5c
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e008      	b.n	8002f18 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d19a      	bne.n	8002e4c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	ffffdfff 	.word	0xffffdfff

08002f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	23c0      	movs	r3, #192	; 0xc0
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f7ff ff7c 	bl	8002e3c <SPI_WaitFifoStateUntilTimeout>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d007      	beq.n	8002f58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e027      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	0013      	movs	r3, r2
 8002f62:	2200      	movs	r2, #0
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	f7ff fef9 	bl	8002d5c <SPI_WaitFlagStateUntilTimeout>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d007      	beq.n	8002f7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	2220      	movs	r2, #32
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e014      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	23c0      	movs	r3, #192	; 0xc0
 8002f82:	00d9      	lsls	r1, r3, #3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f7ff ff55 	bl	8002e3c <SPI_WaitFifoStateUntilTimeout>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d007      	beq.n	8002fa6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e000      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e044      	b.n	800304c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2270      	movs	r2, #112	; 0x70
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fe fb4d 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	; 0x24
 8002fde:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2101      	movs	r1, #1
 8002fec:	438a      	bics	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f830 	bl	8003058 <UART_SetConfig>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e024      	b.n	800304c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f9a9 	bl	8003364 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	490d      	ldr	r1, [pc, #52]	; (8003054 <HAL_UART_Init+0xa4>)
 800301e:	400a      	ands	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	212a      	movs	r1, #42	; 0x2a
 800302e:	438a      	bics	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 fa41 	bl	80034cc <UART_CheckIdleState>
 800304a:	0003      	movs	r3, r0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}
 8003054:	ffffb7ff 	.word	0xffffb7ff

08003058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003064:	2317      	movs	r3, #23
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4aad      	ldr	r2, [pc, #692]	; (8003340 <UART_SetConfig+0x2e8>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4aa8      	ldr	r2, [pc, #672]	; (8003344 <UART_SetConfig+0x2ec>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a9f      	ldr	r2, [pc, #636]	; (8003348 <UART_SetConfig+0x2f0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a9b      	ldr	r2, [pc, #620]	; (800334c <UART_SetConfig+0x2f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d125      	bne.n	800312e <UART_SetConfig+0xd6>
 80030e2:	4b9b      	ldr	r3, [pc, #620]	; (8003350 <UART_SetConfig+0x2f8>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00f      	beq.n	800310e <UART_SetConfig+0xb6>
 80030ee:	d304      	bcc.n	80030fa <UART_SetConfig+0xa2>
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d011      	beq.n	8003118 <UART_SetConfig+0xc0>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d005      	beq.n	8003104 <UART_SetConfig+0xac>
 80030f8:	e013      	b.n	8003122 <UART_SetConfig+0xca>
 80030fa:	231f      	movs	r3, #31
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e022      	b.n	800314a <UART_SetConfig+0xf2>
 8003104:	231f      	movs	r3, #31
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e01d      	b.n	800314a <UART_SetConfig+0xf2>
 800310e:	231f      	movs	r3, #31
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2204      	movs	r2, #4
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e018      	b.n	800314a <UART_SetConfig+0xf2>
 8003118:	231f      	movs	r3, #31
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2208      	movs	r2, #8
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e013      	b.n	800314a <UART_SetConfig+0xf2>
 8003122:	231f      	movs	r3, #31
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2210      	movs	r2, #16
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	e00d      	b.n	800314a <UART_SetConfig+0xf2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a88      	ldr	r2, [pc, #544]	; (8003354 <UART_SetConfig+0x2fc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d104      	bne.n	8003142 <UART_SetConfig+0xea>
 8003138:	231f      	movs	r3, #31
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e003      	b.n	800314a <UART_SetConfig+0xf2>
 8003142:	231f      	movs	r3, #31
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	2210      	movs	r2, #16
 8003148:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	429a      	cmp	r2, r3
 8003154:	d000      	beq.n	8003158 <UART_SetConfig+0x100>
 8003156:	e07d      	b.n	8003254 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003158:	231f      	movs	r3, #31
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d01c      	beq.n	800319c <UART_SetConfig+0x144>
 8003162:	dc02      	bgt.n	800316a <UART_SetConfig+0x112>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <UART_SetConfig+0x11c>
 8003168:	e04b      	b.n	8003202 <UART_SetConfig+0x1aa>
 800316a:	2b04      	cmp	r3, #4
 800316c:	d025      	beq.n	80031ba <UART_SetConfig+0x162>
 800316e:	2b08      	cmp	r3, #8
 8003170:	d037      	beq.n	80031e2 <UART_SetConfig+0x18a>
 8003172:	e046      	b.n	8003202 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003174:	f7ff fae2 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003178:	0003      	movs	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	005a      	lsls	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	18d2      	adds	r2, r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0019      	movs	r1, r3
 800318e:	0010      	movs	r0, r2
 8003190:	f7fc ffba 	bl	8000108 <__udivsi3>
 8003194:	0003      	movs	r3, r0
 8003196:	b29b      	uxth	r3, r3
 8003198:	61bb      	str	r3, [r7, #24]
        break;
 800319a:	e037      	b.n	800320c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	4a6d      	ldr	r2, [pc, #436]	; (8003358 <UART_SetConfig+0x300>)
 80031a4:	189a      	adds	r2, r3, r2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0019      	movs	r1, r3
 80031ac:	0010      	movs	r0, r2
 80031ae:	f7fc ffab 	bl	8000108 <__udivsi3>
 80031b2:	0003      	movs	r3, r0
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	61bb      	str	r3, [r7, #24]
        break;
 80031b8:	e028      	b.n	800320c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7ff fa51 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80031be:	0003      	movs	r3, r0
 80031c0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	005a      	lsls	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	18d2      	adds	r2, r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0019      	movs	r1, r3
 80031d4:	0010      	movs	r0, r2
 80031d6:	f7fc ff97 	bl	8000108 <__udivsi3>
 80031da:	0003      	movs	r3, r0
 80031dc:	b29b      	uxth	r3, r3
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e014      	b.n	800320c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	0252      	lsls	r2, r2, #9
 80031ec:	189a      	adds	r2, r3, r2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f7fc ff87 	bl	8000108 <__udivsi3>
 80031fa:	0003      	movs	r3, r0
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	61bb      	str	r3, [r7, #24]
        break;
 8003200:	e004      	b.n	800320c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003202:	2317      	movs	r3, #23
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
        break;
 800320a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d91b      	bls.n	800324a <UART_SetConfig+0x1f2>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4a51      	ldr	r2, [pc, #324]	; (800335c <UART_SetConfig+0x304>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d817      	bhi.n	800324a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	b29a      	uxth	r2, r3
 800321e:	200a      	movs	r0, #10
 8003220:	183b      	adds	r3, r7, r0
 8003222:	210f      	movs	r1, #15
 8003224:	438a      	bics	r2, r1
 8003226:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	b299      	uxth	r1, r3
 8003234:	183b      	adds	r3, r7, r0
 8003236:	183a      	adds	r2, r7, r0
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	183a      	adds	r2, r7, r0
 8003244:	8812      	ldrh	r2, [r2, #0]
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	e06c      	b.n	8003324 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800324a:	2317      	movs	r3, #23
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e067      	b.n	8003324 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d01b      	beq.n	8003296 <UART_SetConfig+0x23e>
 800325e:	dc02      	bgt.n	8003266 <UART_SetConfig+0x20e>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <UART_SetConfig+0x218>
 8003264:	e049      	b.n	80032fa <UART_SetConfig+0x2a2>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d024      	beq.n	80032b4 <UART_SetConfig+0x25c>
 800326a:	2b08      	cmp	r3, #8
 800326c:	d035      	beq.n	80032da <UART_SetConfig+0x282>
 800326e:	e044      	b.n	80032fa <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7ff fa64 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085a      	lsrs	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	18d2      	adds	r2, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f7fc ff3d 	bl	8000108 <__udivsi3>
 800328e:	0003      	movs	r3, r0
 8003290:	b29b      	uxth	r3, r3
 8003292:	61bb      	str	r3, [r7, #24]
        break;
 8003294:	e036      	b.n	8003304 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <UART_SetConfig+0x308>)
 800329e:	189a      	adds	r2, r3, r2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0019      	movs	r1, r3
 80032a6:	0010      	movs	r0, r2
 80032a8:	f7fc ff2e 	bl	8000108 <__udivsi3>
 80032ac:	0003      	movs	r3, r0
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	61bb      	str	r3, [r7, #24]
        break;
 80032b2:	e027      	b.n	8003304 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b4:	f7ff f9d4 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80032b8:	0003      	movs	r3, r0
 80032ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	085a      	lsrs	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	18d2      	adds	r2, r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f7fc ff1b 	bl	8000108 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	61bb      	str	r3, [r7, #24]
        break;
 80032d8:	e014      	b.n	8003304 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0212      	lsls	r2, r2, #8
 80032e4:	189a      	adds	r2, r3, r2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f7fc ff0b 	bl	8000108 <__udivsi3>
 80032f2:	0003      	movs	r3, r0
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80032fa:	2317      	movs	r3, #23
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
        break;
 8003302:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d908      	bls.n	800331c <UART_SetConfig+0x2c4>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <UART_SetConfig+0x304>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d804      	bhi.n	800331c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	e003      	b.n	8003324 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800331c:	2317      	movs	r3, #23
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003330:	2317      	movs	r3, #23
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b008      	add	sp, #32
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	ffff69f3 	.word	0xffff69f3
 8003344:	ffffcfff 	.word	0xffffcfff
 8003348:	fffff4ff 	.word	0xfffff4ff
 800334c:	40013800 	.word	0x40013800
 8003350:	40021000 	.word	0x40021000
 8003354:	40004400 	.word	0x40004400
 8003358:	00f42400 	.word	0x00f42400
 800335c:	0000ffff 	.word	0x0000ffff
 8003360:	007a1200 	.word	0x007a1200

08003364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	2201      	movs	r2, #1
 8003372:	4013      	ands	r3, r2
 8003374:	d00b      	beq.n	800338e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a4a      	ldr	r2, [pc, #296]	; (80034a8 <UART_AdvFeatureConfig+0x144>)
 800337e:	4013      	ands	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2202      	movs	r2, #2
 8003394:	4013      	ands	r3, r2
 8003396:	d00b      	beq.n	80033b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a43      	ldr	r2, [pc, #268]	; (80034ac <UART_AdvFeatureConfig+0x148>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2204      	movs	r2, #4
 80033b6:	4013      	ands	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a3b      	ldr	r2, [pc, #236]	; (80034b0 <UART_AdvFeatureConfig+0x14c>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2208      	movs	r2, #8
 80033d8:	4013      	ands	r3, r2
 80033da:	d00b      	beq.n	80033f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <UART_AdvFeatureConfig+0x150>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2210      	movs	r2, #16
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00b      	beq.n	8003416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <UART_AdvFeatureConfig+0x154>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2220      	movs	r2, #32
 800341c:	4013      	ands	r3, r2
 800341e:	d00b      	beq.n	8003438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4a25      	ldr	r2, [pc, #148]	; (80034bc <UART_AdvFeatureConfig+0x158>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2240      	movs	r2, #64	; 0x40
 800343e:	4013      	ands	r3, r2
 8003440:	d01d      	beq.n	800347e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <UART_AdvFeatureConfig+0x15c>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	035b      	lsls	r3, r3, #13
 8003462:	429a      	cmp	r2, r3
 8003464:	d10b      	bne.n	800347e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <UART_AdvFeatureConfig+0x160>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	4013      	ands	r3, r2
 8003486:	d00b      	beq.n	80034a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <UART_AdvFeatureConfig+0x164>)
 8003490:	4013      	ands	r3, r2
 8003492:	0019      	movs	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
  }
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	fffdffff 	.word	0xfffdffff
 80034ac:	fffeffff 	.word	0xfffeffff
 80034b0:	fffbffff 	.word	0xfffbffff
 80034b4:	ffff7fff 	.word	0xffff7fff
 80034b8:	ffffefff 	.word	0xffffefff
 80034bc:	ffffdfff 	.word	0xffffdfff
 80034c0:	ffefffff 	.word	0xffefffff
 80034c4:	ff9fffff 	.word	0xff9fffff
 80034c8:	fff7ffff 	.word	0xfff7ffff

080034cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034da:	f7fe fa4d 	bl	8001978 <HAL_GetTick>
 80034de:	0003      	movs	r3, r0
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d10d      	bne.n	800350c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	0399      	lsls	r1, r3, #14
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <UART_CheckIdleState+0x88>)
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	0013      	movs	r3, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	f000 f82a 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8003504:	1e03      	subs	r3, r0, #0
 8003506:	d001      	beq.n	800350c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e01f      	b.n	800354c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
 8003516:	2b04      	cmp	r3, #4
 8003518:	d10d      	bne.n	8003536 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	03d9      	lsls	r1, r3, #15
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <UART_CheckIdleState+0x88>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	0013      	movs	r3, r2
 8003528:	2200      	movs	r2, #0
 800352a:	f000 f815 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e00a      	b.n	800354c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2270      	movs	r2, #112	; 0x70
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}
 8003554:	01ffffff 	.word	0x01ffffff

08003558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	1dfb      	adds	r3, r7, #7
 8003566:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	e05d      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3301      	adds	r3, #1
 800356e:	d05a      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003570:	f7fe fa02 	bl	8001978 <HAL_GetTick>
 8003574:	0002      	movs	r2, r0
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11b      	bne.n	80035be <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	492f      	ldr	r1, [pc, #188]	; (8003650 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003592:	400a      	ands	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2101      	movs	r1, #1
 80035a2:	438a      	bics	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2270      	movs	r2, #112	; 0x70
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e043      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2204      	movs	r2, #4
 80035c6:	4013      	ands	r3, r2
 80035c8:	d02d      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	401a      	ands	r2, r3
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	429a      	cmp	r2, r3
 80035dc:	d123      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4917      	ldr	r1, [pc, #92]	; (8003650 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2270      	movs	r2, #112	; 0x70
 800361e:	2100      	movs	r1, #0
 8003620:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e00f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	425a      	negs	r2, r3
 8003636:	4153      	adcs	r3, r2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	001a      	movs	r2, r3
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d092      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	fffffe5f 	.word	0xfffffe5f

08003654 <__errno>:
 8003654:	4b01      	ldr	r3, [pc, #4]	; (800365c <__errno+0x8>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	4770      	bx	lr
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	2000003c 	.word	0x2000003c

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	2600      	movs	r6, #0
 8003664:	4d0c      	ldr	r5, [pc, #48]	; (8003698 <__libc_init_array+0x38>)
 8003666:	4c0d      	ldr	r4, [pc, #52]	; (800369c <__libc_init_array+0x3c>)
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	2600      	movs	r6, #0
 8003672:	f000 fcd3 	bl	800401c <_init>
 8003676:	4d0a      	ldr	r5, [pc, #40]	; (80036a0 <__libc_init_array+0x40>)
 8003678:	4c0a      	ldr	r4, [pc, #40]	; (80036a4 <__libc_init_array+0x44>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	00b3      	lsls	r3, r6, #2
 8003686:	58eb      	ldr	r3, [r5, r3]
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	00b3      	lsls	r3, r6, #2
 8003690:	58eb      	ldr	r3, [r5, r3]
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	080089e0 	.word	0x080089e0
 800369c:	080089e0 	.word	0x080089e0
 80036a0:	080089e0 	.word	0x080089e0
 80036a4:	080089e4 	.word	0x080089e4

080036a8 <malloc>:
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <malloc+0x10>)
 80036ac:	0001      	movs	r1, r0
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	f000 f856 	bl	8003760 <_malloc_r>
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	2000003c 	.word	0x2000003c

080036bc <memset>:
 80036bc:	0003      	movs	r3, r0
 80036be:	1812      	adds	r2, r2, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	7019      	strb	r1, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_free_r>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	0005      	movs	r5, r0
 80036d0:	2900      	cmp	r1, #0
 80036d2:	d010      	beq.n	80036f6 <_free_r+0x2a>
 80036d4:	1f0c      	subs	r4, r1, #4
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da00      	bge.n	80036de <_free_r+0x12>
 80036dc:	18e4      	adds	r4, r4, r3
 80036de:	0028      	movs	r0, r5
 80036e0:	f000 fbdc 	bl	8003e9c <__malloc_lock>
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <_free_r+0x90>)
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <_free_r+0x2c>
 80036ec:	6063      	str	r3, [r4, #4]
 80036ee:	6014      	str	r4, [r2, #0]
 80036f0:	0028      	movs	r0, r5
 80036f2:	f000 fbd4 	bl	8003e9e <__malloc_unlock>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d909      	bls.n	8003710 <_free_r+0x44>
 80036fc:	6821      	ldr	r1, [r4, #0]
 80036fe:	1860      	adds	r0, r4, r1
 8003700:	4283      	cmp	r3, r0
 8003702:	d1f3      	bne.n	80036ec <_free_r+0x20>
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	1841      	adds	r1, r0, r1
 800370a:	6021      	str	r1, [r4, #0]
 800370c:	e7ee      	b.n	80036ec <_free_r+0x20>
 800370e:	0013      	movs	r3, r2
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	2a00      	cmp	r2, #0
 8003714:	d001      	beq.n	800371a <_free_r+0x4e>
 8003716:	42a2      	cmp	r2, r4
 8003718:	d9f9      	bls.n	800370e <_free_r+0x42>
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	1858      	adds	r0, r3, r1
 800371e:	42a0      	cmp	r0, r4
 8003720:	d10b      	bne.n	800373a <_free_r+0x6e>
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	1809      	adds	r1, r1, r0
 8003726:	1858      	adds	r0, r3, r1
 8003728:	6019      	str	r1, [r3, #0]
 800372a:	4282      	cmp	r2, r0
 800372c:	d1e0      	bne.n	80036f0 <_free_r+0x24>
 800372e:	6810      	ldr	r0, [r2, #0]
 8003730:	6852      	ldr	r2, [r2, #4]
 8003732:	1841      	adds	r1, r0, r1
 8003734:	6019      	str	r1, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e7da      	b.n	80036f0 <_free_r+0x24>
 800373a:	42a0      	cmp	r0, r4
 800373c:	d902      	bls.n	8003744 <_free_r+0x78>
 800373e:	230c      	movs	r3, #12
 8003740:	602b      	str	r3, [r5, #0]
 8003742:	e7d5      	b.n	80036f0 <_free_r+0x24>
 8003744:	6821      	ldr	r1, [r4, #0]
 8003746:	1860      	adds	r0, r4, r1
 8003748:	4282      	cmp	r2, r0
 800374a:	d103      	bne.n	8003754 <_free_r+0x88>
 800374c:	6810      	ldr	r0, [r2, #0]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	1841      	adds	r1, r0, r1
 8003752:	6021      	str	r1, [r4, #0]
 8003754:	6062      	str	r2, [r4, #4]
 8003756:	605c      	str	r4, [r3, #4]
 8003758:	e7ca      	b.n	80036f0 <_free_r+0x24>
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	200000c0 	.word	0x200000c0

08003760 <_malloc_r>:
 8003760:	2303      	movs	r3, #3
 8003762:	b570      	push	{r4, r5, r6, lr}
 8003764:	1ccd      	adds	r5, r1, #3
 8003766:	439d      	bics	r5, r3
 8003768:	3508      	adds	r5, #8
 800376a:	0006      	movs	r6, r0
 800376c:	2d0c      	cmp	r5, #12
 800376e:	d21e      	bcs.n	80037ae <_malloc_r+0x4e>
 8003770:	250c      	movs	r5, #12
 8003772:	42a9      	cmp	r1, r5
 8003774:	d81d      	bhi.n	80037b2 <_malloc_r+0x52>
 8003776:	0030      	movs	r0, r6
 8003778:	f000 fb90 	bl	8003e9c <__malloc_lock>
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <_malloc_r+0xb4>)
 800377e:	6814      	ldr	r4, [r2, #0]
 8003780:	0021      	movs	r1, r4
 8003782:	2900      	cmp	r1, #0
 8003784:	d119      	bne.n	80037ba <_malloc_r+0x5a>
 8003786:	4c24      	ldr	r4, [pc, #144]	; (8003818 <_malloc_r+0xb8>)
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <_malloc_r+0x36>
 800378e:	0030      	movs	r0, r6
 8003790:	f000 f8ae 	bl	80038f0 <_sbrk_r>
 8003794:	6020      	str	r0, [r4, #0]
 8003796:	0029      	movs	r1, r5
 8003798:	0030      	movs	r0, r6
 800379a:	f000 f8a9 	bl	80038f0 <_sbrk_r>
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	d12b      	bne.n	80037fa <_malloc_r+0x9a>
 80037a2:	230c      	movs	r3, #12
 80037a4:	0030      	movs	r0, r6
 80037a6:	6033      	str	r3, [r6, #0]
 80037a8:	f000 fb79 	bl	8003e9e <__malloc_unlock>
 80037ac:	e003      	b.n	80037b6 <_malloc_r+0x56>
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	dadf      	bge.n	8003772 <_malloc_r+0x12>
 80037b2:	230c      	movs	r3, #12
 80037b4:	6033      	str	r3, [r6, #0]
 80037b6:	2000      	movs	r0, #0
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
 80037ba:	680b      	ldr	r3, [r1, #0]
 80037bc:	1b5b      	subs	r3, r3, r5
 80037be:	d419      	bmi.n	80037f4 <_malloc_r+0x94>
 80037c0:	2b0b      	cmp	r3, #11
 80037c2:	d903      	bls.n	80037cc <_malloc_r+0x6c>
 80037c4:	600b      	str	r3, [r1, #0]
 80037c6:	18cc      	adds	r4, r1, r3
 80037c8:	6025      	str	r5, [r4, #0]
 80037ca:	e003      	b.n	80037d4 <_malloc_r+0x74>
 80037cc:	684b      	ldr	r3, [r1, #4]
 80037ce:	428c      	cmp	r4, r1
 80037d0:	d10d      	bne.n	80037ee <_malloc_r+0x8e>
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	0030      	movs	r0, r6
 80037d6:	f000 fb62 	bl	8003e9e <__malloc_unlock>
 80037da:	0020      	movs	r0, r4
 80037dc:	2207      	movs	r2, #7
 80037de:	300b      	adds	r0, #11
 80037e0:	1d23      	adds	r3, r4, #4
 80037e2:	4390      	bics	r0, r2
 80037e4:	1ac3      	subs	r3, r0, r3
 80037e6:	d0e7      	beq.n	80037b8 <_malloc_r+0x58>
 80037e8:	425a      	negs	r2, r3
 80037ea:	50e2      	str	r2, [r4, r3]
 80037ec:	e7e4      	b.n	80037b8 <_malloc_r+0x58>
 80037ee:	6063      	str	r3, [r4, #4]
 80037f0:	000c      	movs	r4, r1
 80037f2:	e7ef      	b.n	80037d4 <_malloc_r+0x74>
 80037f4:	000c      	movs	r4, r1
 80037f6:	6849      	ldr	r1, [r1, #4]
 80037f8:	e7c3      	b.n	8003782 <_malloc_r+0x22>
 80037fa:	2303      	movs	r3, #3
 80037fc:	1cc4      	adds	r4, r0, #3
 80037fe:	439c      	bics	r4, r3
 8003800:	42a0      	cmp	r0, r4
 8003802:	d0e1      	beq.n	80037c8 <_malloc_r+0x68>
 8003804:	1a21      	subs	r1, r4, r0
 8003806:	0030      	movs	r0, r6
 8003808:	f000 f872 	bl	80038f0 <_sbrk_r>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d1db      	bne.n	80037c8 <_malloc_r+0x68>
 8003810:	e7c7      	b.n	80037a2 <_malloc_r+0x42>
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	200000c0 	.word	0x200000c0
 8003818:	200000c4 	.word	0x200000c4

0800381c <_puts_r>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	0005      	movs	r5, r0
 8003820:	000e      	movs	r6, r1
 8003822:	2800      	cmp	r0, #0
 8003824:	d004      	beq.n	8003830 <_puts_r+0x14>
 8003826:	6983      	ldr	r3, [r0, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <_puts_r+0x14>
 800382c:	f000 fa36 	bl	8003c9c <__sinit>
 8003830:	69ab      	ldr	r3, [r5, #24]
 8003832:	68ac      	ldr	r4, [r5, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <_puts_r+0x22>
 8003838:	0028      	movs	r0, r5
 800383a:	f000 fa2f 	bl	8003c9c <__sinit>
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <_puts_r+0xb4>)
 8003840:	429c      	cmp	r4, r3
 8003842:	d10f      	bne.n	8003864 <_puts_r+0x48>
 8003844:	686c      	ldr	r4, [r5, #4]
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	d502      	bpl.n	8003852 <_puts_r+0x36>
 800384c:	6923      	ldr	r3, [r4, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11f      	bne.n	8003892 <_puts_r+0x76>
 8003852:	0021      	movs	r1, r4
 8003854:	0028      	movs	r0, r5
 8003856:	f000 f8b3 	bl	80039c0 <__swsetup_r>
 800385a:	2800      	cmp	r0, #0
 800385c:	d019      	beq.n	8003892 <_puts_r+0x76>
 800385e:	2001      	movs	r0, #1
 8003860:	4240      	negs	r0, r0
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <_puts_r+0xb8>)
 8003866:	429c      	cmp	r4, r3
 8003868:	d101      	bne.n	800386e <_puts_r+0x52>
 800386a:	68ac      	ldr	r4, [r5, #8]
 800386c:	e7eb      	b.n	8003846 <_puts_r+0x2a>
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <_puts_r+0xbc>)
 8003870:	429c      	cmp	r4, r3
 8003872:	d1e8      	bne.n	8003846 <_puts_r+0x2a>
 8003874:	68ec      	ldr	r4, [r5, #12]
 8003876:	e7e6      	b.n	8003846 <_puts_r+0x2a>
 8003878:	3601      	adds	r6, #1
 800387a:	60a3      	str	r3, [r4, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	da04      	bge.n	800388a <_puts_r+0x6e>
 8003880:	69a2      	ldr	r2, [r4, #24]
 8003882:	429a      	cmp	r2, r3
 8003884:	dc16      	bgt.n	80038b4 <_puts_r+0x98>
 8003886:	290a      	cmp	r1, #10
 8003888:	d014      	beq.n	80038b4 <_puts_r+0x98>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	6022      	str	r2, [r4, #0]
 8003890:	7019      	strb	r1, [r3, #0]
 8003892:	68a3      	ldr	r3, [r4, #8]
 8003894:	7831      	ldrb	r1, [r6, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	2900      	cmp	r1, #0
 800389a:	d1ed      	bne.n	8003878 <_puts_r+0x5c>
 800389c:	60a3      	str	r3, [r4, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da0f      	bge.n	80038c2 <_puts_r+0xa6>
 80038a2:	0022      	movs	r2, r4
 80038a4:	310a      	adds	r1, #10
 80038a6:	0028      	movs	r0, r5
 80038a8:	f000 f834 	bl	8003914 <__swbuf_r>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d0d6      	beq.n	800385e <_puts_r+0x42>
 80038b0:	200a      	movs	r0, #10
 80038b2:	e7d6      	b.n	8003862 <_puts_r+0x46>
 80038b4:	0022      	movs	r2, r4
 80038b6:	0028      	movs	r0, r5
 80038b8:	f000 f82c 	bl	8003914 <__swbuf_r>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d1e8      	bne.n	8003892 <_puts_r+0x76>
 80038c0:	e7cd      	b.n	800385e <_puts_r+0x42>
 80038c2:	200a      	movs	r0, #10
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	6022      	str	r2, [r4, #0]
 80038ca:	7018      	strb	r0, [r3, #0]
 80038cc:	e7c9      	b.n	8003862 <_puts_r+0x46>
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	080089a0 	.word	0x080089a0
 80038d4:	080089c0 	.word	0x080089c0
 80038d8:	08008980 	.word	0x08008980

080038dc <puts>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	4b03      	ldr	r3, [pc, #12]	; (80038ec <puts+0x10>)
 80038e0:	0001      	movs	r1, r0
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	f7ff ff9a 	bl	800381c <_puts_r>
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	2000003c 	.word	0x2000003c

080038f0 <_sbrk_r>:
 80038f0:	2300      	movs	r3, #0
 80038f2:	b570      	push	{r4, r5, r6, lr}
 80038f4:	4c06      	ldr	r4, [pc, #24]	; (8003910 <_sbrk_r+0x20>)
 80038f6:	0005      	movs	r5, r0
 80038f8:	0008      	movs	r0, r1
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	f7fd ff86 	bl	800180c <_sbrk>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d103      	bne.n	800390c <_sbrk_r+0x1c>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d000      	beq.n	800390c <_sbrk_r+0x1c>
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	bd70      	pop	{r4, r5, r6, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	200001d0 	.word	0x200001d0

08003914 <__swbuf_r>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	0005      	movs	r5, r0
 8003918:	000e      	movs	r6, r1
 800391a:	0014      	movs	r4, r2
 800391c:	2800      	cmp	r0, #0
 800391e:	d004      	beq.n	800392a <__swbuf_r+0x16>
 8003920:	6983      	ldr	r3, [r0, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <__swbuf_r+0x16>
 8003926:	f000 f9b9 	bl	8003c9c <__sinit>
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <__swbuf_r+0xa0>)
 800392c:	429c      	cmp	r4, r3
 800392e:	d12d      	bne.n	800398c <__swbuf_r+0x78>
 8003930:	686c      	ldr	r4, [r5, #4]
 8003932:	69a3      	ldr	r3, [r4, #24]
 8003934:	60a3      	str	r3, [r4, #8]
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	d531      	bpl.n	80039a0 <__swbuf_r+0x8c>
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02e      	beq.n	80039a0 <__swbuf_r+0x8c>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	6922      	ldr	r2, [r4, #16]
 8003946:	b2f7      	uxtb	r7, r6
 8003948:	1a98      	subs	r0, r3, r2
 800394a:	6963      	ldr	r3, [r4, #20]
 800394c:	b2f6      	uxtb	r6, r6
 800394e:	4283      	cmp	r3, r0
 8003950:	dc05      	bgt.n	800395e <__swbuf_r+0x4a>
 8003952:	0021      	movs	r1, r4
 8003954:	0028      	movs	r0, r5
 8003956:	f000 f933 	bl	8003bc0 <_fflush_r>
 800395a:	2800      	cmp	r0, #0
 800395c:	d126      	bne.n	80039ac <__swbuf_r+0x98>
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	3001      	adds	r0, #1
 8003962:	3b01      	subs	r3, #1
 8003964:	60a3      	str	r3, [r4, #8]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	701f      	strb	r7, [r3, #0]
 800396e:	6963      	ldr	r3, [r4, #20]
 8003970:	4283      	cmp	r3, r0
 8003972:	d004      	beq.n	800397e <__swbuf_r+0x6a>
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	07db      	lsls	r3, r3, #31
 8003978:	d51a      	bpl.n	80039b0 <__swbuf_r+0x9c>
 800397a:	2e0a      	cmp	r6, #10
 800397c:	d118      	bne.n	80039b0 <__swbuf_r+0x9c>
 800397e:	0021      	movs	r1, r4
 8003980:	0028      	movs	r0, r5
 8003982:	f000 f91d 	bl	8003bc0 <_fflush_r>
 8003986:	2800      	cmp	r0, #0
 8003988:	d012      	beq.n	80039b0 <__swbuf_r+0x9c>
 800398a:	e00f      	b.n	80039ac <__swbuf_r+0x98>
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <__swbuf_r+0xa4>)
 800398e:	429c      	cmp	r4, r3
 8003990:	d101      	bne.n	8003996 <__swbuf_r+0x82>
 8003992:	68ac      	ldr	r4, [r5, #8]
 8003994:	e7cd      	b.n	8003932 <__swbuf_r+0x1e>
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <__swbuf_r+0xa8>)
 8003998:	429c      	cmp	r4, r3
 800399a:	d1ca      	bne.n	8003932 <__swbuf_r+0x1e>
 800399c:	68ec      	ldr	r4, [r5, #12]
 800399e:	e7c8      	b.n	8003932 <__swbuf_r+0x1e>
 80039a0:	0021      	movs	r1, r4
 80039a2:	0028      	movs	r0, r5
 80039a4:	f000 f80c 	bl	80039c0 <__swsetup_r>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d0ca      	beq.n	8003942 <__swbuf_r+0x2e>
 80039ac:	2601      	movs	r6, #1
 80039ae:	4276      	negs	r6, r6
 80039b0:	0030      	movs	r0, r6
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b4:	080089a0 	.word	0x080089a0
 80039b8:	080089c0 	.word	0x080089c0
 80039bc:	08008980 	.word	0x08008980

080039c0 <__swsetup_r>:
 80039c0:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <__swsetup_r+0xdc>)
 80039c2:	b570      	push	{r4, r5, r6, lr}
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	0006      	movs	r6, r0
 80039c8:	000c      	movs	r4, r1
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	d005      	beq.n	80039da <__swsetup_r+0x1a>
 80039ce:	69ab      	ldr	r3, [r5, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <__swsetup_r+0x1a>
 80039d4:	0028      	movs	r0, r5
 80039d6:	f000 f961 	bl	8003c9c <__sinit>
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <__swsetup_r+0xe0>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	d10f      	bne.n	8003a00 <__swsetup_r+0x40>
 80039e0:	686c      	ldr	r4, [r5, #4]
 80039e2:	230c      	movs	r3, #12
 80039e4:	5ee2      	ldrsh	r2, [r4, r3]
 80039e6:	b293      	uxth	r3, r2
 80039e8:	0719      	lsls	r1, r3, #28
 80039ea:	d42d      	bmi.n	8003a48 <__swsetup_r+0x88>
 80039ec:	06d9      	lsls	r1, r3, #27
 80039ee:	d411      	bmi.n	8003a14 <__swsetup_r+0x54>
 80039f0:	2309      	movs	r3, #9
 80039f2:	2001      	movs	r0, #1
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	3337      	adds	r3, #55	; 0x37
 80039f8:	4313      	orrs	r3, r2
 80039fa:	81a3      	strh	r3, [r4, #12]
 80039fc:	4240      	negs	r0, r0
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <__swsetup_r+0xe4>)
 8003a02:	429c      	cmp	r4, r3
 8003a04:	d101      	bne.n	8003a0a <__swsetup_r+0x4a>
 8003a06:	68ac      	ldr	r4, [r5, #8]
 8003a08:	e7eb      	b.n	80039e2 <__swsetup_r+0x22>
 8003a0a:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <__swsetup_r+0xe8>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d1e8      	bne.n	80039e2 <__swsetup_r+0x22>
 8003a10:	68ec      	ldr	r4, [r5, #12]
 8003a12:	e7e6      	b.n	80039e2 <__swsetup_r+0x22>
 8003a14:	075b      	lsls	r3, r3, #29
 8003a16:	d513      	bpl.n	8003a40 <__swsetup_r+0x80>
 8003a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a1a:	2900      	cmp	r1, #0
 8003a1c:	d008      	beq.n	8003a30 <__swsetup_r+0x70>
 8003a1e:	0023      	movs	r3, r4
 8003a20:	3344      	adds	r3, #68	; 0x44
 8003a22:	4299      	cmp	r1, r3
 8003a24:	d002      	beq.n	8003a2c <__swsetup_r+0x6c>
 8003a26:	0030      	movs	r0, r6
 8003a28:	f7ff fe50 	bl	80036cc <_free_r>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8003a30:	2224      	movs	r2, #36	; 0x24
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	4393      	bics	r3, r2
 8003a36:	81a3      	strh	r3, [r4, #12]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	2308      	movs	r3, #8
 8003a42:	89a2      	ldrh	r2, [r4, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <__swsetup_r+0xa6>
 8003a4e:	21a0      	movs	r1, #160	; 0xa0
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	0089      	lsls	r1, r1, #2
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	400b      	ands	r3, r1
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <__swsetup_r+0xa6>
 8003a5e:	0021      	movs	r1, r4
 8003a60:	0030      	movs	r0, r6
 8003a62:	f000 f9d7 	bl	8003e14 <__smakebuf_r>
 8003a66:	2301      	movs	r3, #1
 8003a68:	89a2      	ldrh	r2, [r4, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d011      	beq.n	8003a92 <__swsetup_r+0xd2>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60a3      	str	r3, [r4, #8]
 8003a72:	6963      	ldr	r3, [r4, #20]
 8003a74:	425b      	negs	r3, r3
 8003a76:	61a3      	str	r3, [r4, #24]
 8003a78:	2000      	movs	r0, #0
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	4283      	cmp	r3, r0
 8003a7e:	d1be      	bne.n	80039fe <__swsetup_r+0x3e>
 8003a80:	230c      	movs	r3, #12
 8003a82:	5ee2      	ldrsh	r2, [r4, r3]
 8003a84:	0613      	lsls	r3, r2, #24
 8003a86:	d5ba      	bpl.n	80039fe <__swsetup_r+0x3e>
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	3801      	subs	r0, #1
 8003a90:	e7b5      	b.n	80039fe <__swsetup_r+0x3e>
 8003a92:	0792      	lsls	r2, r2, #30
 8003a94:	d400      	bmi.n	8003a98 <__swsetup_r+0xd8>
 8003a96:	6963      	ldr	r3, [r4, #20]
 8003a98:	60a3      	str	r3, [r4, #8]
 8003a9a:	e7ed      	b.n	8003a78 <__swsetup_r+0xb8>
 8003a9c:	2000003c 	.word	0x2000003c
 8003aa0:	080089a0 	.word	0x080089a0
 8003aa4:	080089c0 	.word	0x080089c0
 8003aa8:	08008980 	.word	0x08008980

08003aac <__sflush_r>:
 8003aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aae:	898a      	ldrh	r2, [r1, #12]
 8003ab0:	0005      	movs	r5, r0
 8003ab2:	000c      	movs	r4, r1
 8003ab4:	0713      	lsls	r3, r2, #28
 8003ab6:	d460      	bmi.n	8003b7a <__sflush_r+0xce>
 8003ab8:	684b      	ldr	r3, [r1, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dc04      	bgt.n	8003ac8 <__sflush_r+0x1c>
 8003abe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	dc01      	bgt.n	8003ac8 <__sflush_r+0x1c>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ac8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003aca:	2f00      	cmp	r7, #0
 8003acc:	d0fa      	beq.n	8003ac4 <__sflush_r+0x18>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	682e      	ldr	r6, [r5, #0]
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	6a21      	ldr	r1, [r4, #32]
 8003ada:	401a      	ands	r2, r3
 8003adc:	d034      	beq.n	8003b48 <__sflush_r+0x9c>
 8003ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	075b      	lsls	r3, r3, #29
 8003ae4:	d506      	bpl.n	8003af4 <__sflush_r+0x48>
 8003ae6:	6863      	ldr	r3, [r4, #4]
 8003ae8:	1ac0      	subs	r0, r0, r3
 8003aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <__sflush_r+0x48>
 8003af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003af2:	1ac0      	subs	r0, r0, r3
 8003af4:	0002      	movs	r2, r0
 8003af6:	6a21      	ldr	r1, [r4, #32]
 8003af8:	2300      	movs	r3, #0
 8003afa:	0028      	movs	r0, r5
 8003afc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003afe:	47b8      	blx	r7
 8003b00:	89a1      	ldrh	r1, [r4, #12]
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d106      	bne.n	8003b14 <__sflush_r+0x68>
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	2b1d      	cmp	r3, #29
 8003b0a:	d830      	bhi.n	8003b6e <__sflush_r+0xc2>
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <__sflush_r+0x110>)
 8003b0e:	40da      	lsrs	r2, r3
 8003b10:	07d3      	lsls	r3, r2, #31
 8003b12:	d52c      	bpl.n	8003b6e <__sflush_r+0xc2>
 8003b14:	2300      	movs	r3, #0
 8003b16:	6063      	str	r3, [r4, #4]
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	04cb      	lsls	r3, r1, #19
 8003b1e:	d505      	bpl.n	8003b2c <__sflush_r+0x80>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <__sflush_r+0x7e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d100      	bne.n	8003b2c <__sflush_r+0x80>
 8003b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b2e:	602e      	str	r6, [r5, #0]
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d0c7      	beq.n	8003ac4 <__sflush_r+0x18>
 8003b34:	0023      	movs	r3, r4
 8003b36:	3344      	adds	r3, #68	; 0x44
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d002      	beq.n	8003b42 <__sflush_r+0x96>
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	f7ff fdc5 	bl	80036cc <_free_r>
 8003b42:	2000      	movs	r0, #0
 8003b44:	6360      	str	r0, [r4, #52]	; 0x34
 8003b46:	e7be      	b.n	8003ac6 <__sflush_r+0x1a>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	0028      	movs	r0, r5
 8003b4c:	47b8      	blx	r7
 8003b4e:	1c43      	adds	r3, r0, #1
 8003b50:	d1c6      	bne.n	8003ae0 <__sflush_r+0x34>
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0c3      	beq.n	8003ae0 <__sflush_r+0x34>
 8003b58:	2b1d      	cmp	r3, #29
 8003b5a:	d001      	beq.n	8003b60 <__sflush_r+0xb4>
 8003b5c:	2b16      	cmp	r3, #22
 8003b5e:	d101      	bne.n	8003b64 <__sflush_r+0xb8>
 8003b60:	602e      	str	r6, [r5, #0]
 8003b62:	e7af      	b.n	8003ac4 <__sflush_r+0x18>
 8003b64:	2340      	movs	r3, #64	; 0x40
 8003b66:	89a2      	ldrh	r2, [r4, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	81a3      	strh	r3, [r4, #12]
 8003b6c:	e7ab      	b.n	8003ac6 <__sflush_r+0x1a>
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	430b      	orrs	r3, r1
 8003b72:	2001      	movs	r0, #1
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	4240      	negs	r0, r0
 8003b78:	e7a5      	b.n	8003ac6 <__sflush_r+0x1a>
 8003b7a:	690f      	ldr	r7, [r1, #16]
 8003b7c:	2f00      	cmp	r7, #0
 8003b7e:	d0a1      	beq.n	8003ac4 <__sflush_r+0x18>
 8003b80:	680b      	ldr	r3, [r1, #0]
 8003b82:	600f      	str	r7, [r1, #0]
 8003b84:	1bdb      	subs	r3, r3, r7
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	0792      	lsls	r2, r2, #30
 8003b8c:	d100      	bne.n	8003b90 <__sflush_r+0xe4>
 8003b8e:	694b      	ldr	r3, [r1, #20]
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	9b01      	ldr	r3, [sp, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	dc00      	bgt.n	8003b9a <__sflush_r+0xee>
 8003b98:	e794      	b.n	8003ac4 <__sflush_r+0x18>
 8003b9a:	9b01      	ldr	r3, [sp, #4]
 8003b9c:	003a      	movs	r2, r7
 8003b9e:	6a21      	ldr	r1, [r4, #32]
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ba4:	47b0      	blx	r6
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	dc03      	bgt.n	8003bb2 <__sflush_r+0x106>
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	89a2      	ldrh	r2, [r4, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	e7df      	b.n	8003b72 <__sflush_r+0xc6>
 8003bb2:	9b01      	ldr	r3, [sp, #4]
 8003bb4:	183f      	adds	r7, r7, r0
 8003bb6:	1a1b      	subs	r3, r3, r0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	e7ea      	b.n	8003b92 <__sflush_r+0xe6>
 8003bbc:	20400001 	.word	0x20400001

08003bc0 <_fflush_r>:
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	0005      	movs	r5, r0
 8003bc6:	000c      	movs	r4, r1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <_fflush_r+0x10>
 8003bcc:	2000      	movs	r0, #0
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d004      	beq.n	8003bde <_fflush_r+0x1e>
 8003bd4:	6983      	ldr	r3, [r0, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <_fflush_r+0x1e>
 8003bda:	f000 f85f 	bl	8003c9c <__sinit>
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <_fflush_r+0x4c>)
 8003be0:	429c      	cmp	r4, r3
 8003be2:	d109      	bne.n	8003bf8 <_fflush_r+0x38>
 8003be4:	686c      	ldr	r4, [r5, #4]
 8003be6:	220c      	movs	r2, #12
 8003be8:	5ea3      	ldrsh	r3, [r4, r2]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ee      	beq.n	8003bcc <_fflush_r+0xc>
 8003bee:	0021      	movs	r1, r4
 8003bf0:	0028      	movs	r0, r5
 8003bf2:	f7ff ff5b 	bl	8003aac <__sflush_r>
 8003bf6:	e7ea      	b.n	8003bce <_fflush_r+0xe>
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <_fflush_r+0x50>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d101      	bne.n	8003c02 <_fflush_r+0x42>
 8003bfe:	68ac      	ldr	r4, [r5, #8]
 8003c00:	e7f1      	b.n	8003be6 <_fflush_r+0x26>
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <_fflush_r+0x54>)
 8003c04:	429c      	cmp	r4, r3
 8003c06:	d1ee      	bne.n	8003be6 <_fflush_r+0x26>
 8003c08:	68ec      	ldr	r4, [r5, #12]
 8003c0a:	e7ec      	b.n	8003be6 <_fflush_r+0x26>
 8003c0c:	080089a0 	.word	0x080089a0
 8003c10:	080089c0 	.word	0x080089c0
 8003c14:	08008980 	.word	0x08008980

08003c18 <std>:
 8003c18:	2300      	movs	r3, #0
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	0004      	movs	r4, r0
 8003c1e:	6003      	str	r3, [r0, #0]
 8003c20:	6043      	str	r3, [r0, #4]
 8003c22:	6083      	str	r3, [r0, #8]
 8003c24:	8181      	strh	r1, [r0, #12]
 8003c26:	6643      	str	r3, [r0, #100]	; 0x64
 8003c28:	81c2      	strh	r2, [r0, #14]
 8003c2a:	6103      	str	r3, [r0, #16]
 8003c2c:	6143      	str	r3, [r0, #20]
 8003c2e:	6183      	str	r3, [r0, #24]
 8003c30:	0019      	movs	r1, r3
 8003c32:	2208      	movs	r2, #8
 8003c34:	305c      	adds	r0, #92	; 0x5c
 8003c36:	f7ff fd41 	bl	80036bc <memset>
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <std+0x38>)
 8003c3c:	6224      	str	r4, [r4, #32]
 8003c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <std+0x3c>)
 8003c42:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <std+0x40>)
 8003c46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <std+0x44>)
 8003c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	08003ea1 	.word	0x08003ea1
 8003c54:	08003ec9 	.word	0x08003ec9
 8003c58:	08003f01 	.word	0x08003f01
 8003c5c:	08003f2d 	.word	0x08003f2d

08003c60 <_cleanup_r>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	4902      	ldr	r1, [pc, #8]	; (8003c6c <_cleanup_r+0xc>)
 8003c64:	f000 f88c 	bl	8003d80 <_fwalk_reent>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	08003bc1 	.word	0x08003bc1

08003c70 <__sfmoreglue>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	2568      	movs	r5, #104	; 0x68
 8003c74:	1e4a      	subs	r2, r1, #1
 8003c76:	4355      	muls	r5, r2
 8003c78:	000e      	movs	r6, r1
 8003c7a:	0029      	movs	r1, r5
 8003c7c:	3174      	adds	r1, #116	; 0x74
 8003c7e:	f7ff fd6f 	bl	8003760 <_malloc_r>
 8003c82:	1e04      	subs	r4, r0, #0
 8003c84:	d008      	beq.n	8003c98 <__sfmoreglue+0x28>
 8003c86:	2100      	movs	r1, #0
 8003c88:	002a      	movs	r2, r5
 8003c8a:	6001      	str	r1, [r0, #0]
 8003c8c:	6046      	str	r6, [r0, #4]
 8003c8e:	300c      	adds	r0, #12
 8003c90:	60a0      	str	r0, [r4, #8]
 8003c92:	3268      	adds	r2, #104	; 0x68
 8003c94:	f7ff fd12 	bl	80036bc <memset>
 8003c98:	0020      	movs	r0, r4
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}

08003c9c <__sinit>:
 8003c9c:	6983      	ldr	r3, [r0, #24]
 8003c9e:	b513      	push	{r0, r1, r4, lr}
 8003ca0:	0004      	movs	r4, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d128      	bne.n	8003cf8 <__sinit+0x5c>
 8003ca6:	6483      	str	r3, [r0, #72]	; 0x48
 8003ca8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003caa:	6503      	str	r3, [r0, #80]	; 0x50
 8003cac:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <__sinit+0x60>)
 8003cae:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <__sinit+0x64>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6282      	str	r2, [r0, #40]	; 0x28
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	d101      	bne.n	8003cbe <__sinit+0x22>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	6183      	str	r3, [r0, #24]
 8003cbe:	0020      	movs	r0, r4
 8003cc0:	f000 f820 	bl	8003d04 <__sfp>
 8003cc4:	6060      	str	r0, [r4, #4]
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	f000 f81c 	bl	8003d04 <__sfp>
 8003ccc:	60a0      	str	r0, [r4, #8]
 8003cce:	0020      	movs	r0, r4
 8003cd0:	f000 f818 	bl	8003d04 <__sfp>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60e0      	str	r0, [r4, #12]
 8003cd8:	2104      	movs	r1, #4
 8003cda:	6860      	ldr	r0, [r4, #4]
 8003cdc:	f7ff ff9c 	bl	8003c18 <std>
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2109      	movs	r1, #9
 8003ce4:	68a0      	ldr	r0, [r4, #8]
 8003ce6:	f7ff ff97 	bl	8003c18 <std>
 8003cea:	2202      	movs	r2, #2
 8003cec:	2112      	movs	r1, #18
 8003cee:	68e0      	ldr	r0, [r4, #12]
 8003cf0:	f7ff ff92 	bl	8003c18 <std>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	61a3      	str	r3, [r4, #24]
 8003cf8:	bd13      	pop	{r0, r1, r4, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	0800897c 	.word	0x0800897c
 8003d00:	08003c61 	.word	0x08003c61

08003d04 <__sfp>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <__sfp+0x74>)
 8003d08:	0007      	movs	r7, r0
 8003d0a:	681e      	ldr	r6, [r3, #0]
 8003d0c:	69b3      	ldr	r3, [r6, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <__sfp+0x14>
 8003d12:	0030      	movs	r0, r6
 8003d14:	f7ff ffc2 	bl	8003c9c <__sinit>
 8003d18:	3648      	adds	r6, #72	; 0x48
 8003d1a:	68b4      	ldr	r4, [r6, #8]
 8003d1c:	6873      	ldr	r3, [r6, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	d504      	bpl.n	8003d2c <__sfp+0x28>
 8003d22:	6833      	ldr	r3, [r6, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <__sfp+0x34>
 8003d28:	6836      	ldr	r6, [r6, #0]
 8003d2a:	e7f6      	b.n	8003d1a <__sfp+0x16>
 8003d2c:	220c      	movs	r2, #12
 8003d2e:	5ea5      	ldrsh	r5, [r4, r2]
 8003d30:	2d00      	cmp	r5, #0
 8003d32:	d00d      	beq.n	8003d50 <__sfp+0x4c>
 8003d34:	3468      	adds	r4, #104	; 0x68
 8003d36:	e7f2      	b.n	8003d1e <__sfp+0x1a>
 8003d38:	2104      	movs	r1, #4
 8003d3a:	0038      	movs	r0, r7
 8003d3c:	f7ff ff98 	bl	8003c70 <__sfmoreglue>
 8003d40:	6030      	str	r0, [r6, #0]
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d1f0      	bne.n	8003d28 <__sfp+0x24>
 8003d46:	230c      	movs	r3, #12
 8003d48:	0004      	movs	r4, r0
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	0020      	movs	r0, r4
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <__sfp+0x78>)
 8003d54:	6665      	str	r5, [r4, #100]	; 0x64
 8003d56:	6025      	str	r5, [r4, #0]
 8003d58:	6065      	str	r5, [r4, #4]
 8003d5a:	60a5      	str	r5, [r4, #8]
 8003d5c:	60e3      	str	r3, [r4, #12]
 8003d5e:	6125      	str	r5, [r4, #16]
 8003d60:	6165      	str	r5, [r4, #20]
 8003d62:	61a5      	str	r5, [r4, #24]
 8003d64:	2208      	movs	r2, #8
 8003d66:	0029      	movs	r1, r5
 8003d68:	305c      	adds	r0, #92	; 0x5c
 8003d6a:	f7ff fca7 	bl	80036bc <memset>
 8003d6e:	6365      	str	r5, [r4, #52]	; 0x34
 8003d70:	63a5      	str	r5, [r4, #56]	; 0x38
 8003d72:	64a5      	str	r5, [r4, #72]	; 0x48
 8003d74:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d76:	e7e9      	b.n	8003d4c <__sfp+0x48>
 8003d78:	0800897c 	.word	0x0800897c
 8003d7c:	ffff0001 	.word	0xffff0001

08003d80 <_fwalk_reent>:
 8003d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d82:	0004      	movs	r4, r0
 8003d84:	0007      	movs	r7, r0
 8003d86:	2600      	movs	r6, #0
 8003d88:	9101      	str	r1, [sp, #4]
 8003d8a:	3448      	adds	r4, #72	; 0x48
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	d101      	bne.n	8003d94 <_fwalk_reent+0x14>
 8003d90:	0030      	movs	r0, r6
 8003d92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	68a5      	ldr	r5, [r4, #8]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	9b00      	ldr	r3, [sp, #0]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	d501      	bpl.n	8003da6 <_fwalk_reent+0x26>
 8003da2:	6824      	ldr	r4, [r4, #0]
 8003da4:	e7f2      	b.n	8003d8c <_fwalk_reent+0xc>
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d908      	bls.n	8003dbe <_fwalk_reent+0x3e>
 8003dac:	220e      	movs	r2, #14
 8003dae:	5eab      	ldrsh	r3, [r5, r2]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d004      	beq.n	8003dbe <_fwalk_reent+0x3e>
 8003db4:	0029      	movs	r1, r5
 8003db6:	0038      	movs	r0, r7
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	4798      	blx	r3
 8003dbc:	4306      	orrs	r6, r0
 8003dbe:	3568      	adds	r5, #104	; 0x68
 8003dc0:	e7eb      	b.n	8003d9a <_fwalk_reent+0x1a>
	...

08003dc4 <__swhatbuf_r>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	000e      	movs	r6, r1
 8003dc8:	001d      	movs	r5, r3
 8003dca:	230e      	movs	r3, #14
 8003dcc:	5ec9      	ldrsh	r1, [r1, r3]
 8003dce:	b096      	sub	sp, #88	; 0x58
 8003dd0:	0014      	movs	r4, r2
 8003dd2:	2900      	cmp	r1, #0
 8003dd4:	da07      	bge.n	8003de6 <__swhatbuf_r+0x22>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	89b3      	ldrh	r3, [r6, #12]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	d411      	bmi.n	8003e04 <__swhatbuf_r+0x40>
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	e00f      	b.n	8003e06 <__swhatbuf_r+0x42>
 8003de6:	466a      	mov	r2, sp
 8003de8:	f000 f8cc 	bl	8003f84 <_fstat_r>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	dbf2      	blt.n	8003dd6 <__swhatbuf_r+0x12>
 8003df0:	22f0      	movs	r2, #240	; 0xf0
 8003df2:	9b01      	ldr	r3, [sp, #4]
 8003df4:	0212      	lsls	r2, r2, #8
 8003df6:	4013      	ands	r3, r2
 8003df8:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <__swhatbuf_r+0x4c>)
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	425a      	negs	r2, r3
 8003dfe:	4153      	adcs	r3, r2
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	e7ed      	b.n	8003de0 <__swhatbuf_r+0x1c>
 8003e04:	2340      	movs	r3, #64	; 0x40
 8003e06:	2000      	movs	r0, #0
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	b016      	add	sp, #88	; 0x58
 8003e0c:	bd70      	pop	{r4, r5, r6, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	ffffe000 	.word	0xffffe000

08003e14 <__smakebuf_r>:
 8003e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e16:	2602      	movs	r6, #2
 8003e18:	898b      	ldrh	r3, [r1, #12]
 8003e1a:	0005      	movs	r5, r0
 8003e1c:	000c      	movs	r4, r1
 8003e1e:	4233      	tst	r3, r6
 8003e20:	d006      	beq.n	8003e30 <__smakebuf_r+0x1c>
 8003e22:	0023      	movs	r3, r4
 8003e24:	3347      	adds	r3, #71	; 0x47
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	6123      	str	r3, [r4, #16]
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	6163      	str	r3, [r4, #20]
 8003e2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003e30:	ab01      	add	r3, sp, #4
 8003e32:	466a      	mov	r2, sp
 8003e34:	f7ff ffc6 	bl	8003dc4 <__swhatbuf_r>
 8003e38:	9900      	ldr	r1, [sp, #0]
 8003e3a:	0007      	movs	r7, r0
 8003e3c:	0028      	movs	r0, r5
 8003e3e:	f7ff fc8f 	bl	8003760 <_malloc_r>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d108      	bne.n	8003e58 <__smakebuf_r+0x44>
 8003e46:	220c      	movs	r2, #12
 8003e48:	5ea3      	ldrsh	r3, [r4, r2]
 8003e4a:	059a      	lsls	r2, r3, #22
 8003e4c:	d4ef      	bmi.n	8003e2e <__smakebuf_r+0x1a>
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4393      	bics	r3, r2
 8003e52:	431e      	orrs	r6, r3
 8003e54:	81a6      	strh	r6, [r4, #12]
 8003e56:	e7e4      	b.n	8003e22 <__smakebuf_r+0xe>
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <__smakebuf_r+0x84>)
 8003e5a:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	89a2      	ldrh	r2, [r4, #12]
 8003e60:	6020      	str	r0, [r4, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	81a3      	strh	r3, [r4, #12]
 8003e66:	9b00      	ldr	r3, [sp, #0]
 8003e68:	6120      	str	r0, [r4, #16]
 8003e6a:	6163      	str	r3, [r4, #20]
 8003e6c:	9b01      	ldr	r3, [sp, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <__smakebuf_r+0x7a>
 8003e72:	230e      	movs	r3, #14
 8003e74:	5ee1      	ldrsh	r1, [r4, r3]
 8003e76:	0028      	movs	r0, r5
 8003e78:	f000 f896 	bl	8003fa8 <_isatty_r>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d006      	beq.n	8003e8e <__smakebuf_r+0x7a>
 8003e80:	2203      	movs	r2, #3
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	4393      	bics	r3, r2
 8003e86:	001a      	movs	r2, r3
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	89a0      	ldrh	r0, [r4, #12]
 8003e90:	4338      	orrs	r0, r7
 8003e92:	81a0      	strh	r0, [r4, #12]
 8003e94:	e7cb      	b.n	8003e2e <__smakebuf_r+0x1a>
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	08003c61 	.word	0x08003c61

08003e9c <__malloc_lock>:
 8003e9c:	4770      	bx	lr

08003e9e <__malloc_unlock>:
 8003e9e:	4770      	bx	lr

08003ea0 <__sread>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	000c      	movs	r4, r1
 8003ea4:	250e      	movs	r5, #14
 8003ea6:	5f49      	ldrsh	r1, [r1, r5]
 8003ea8:	f000 f8a4 	bl	8003ff4 <_read_r>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	db03      	blt.n	8003eb8 <__sread+0x18>
 8003eb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eb2:	181b      	adds	r3, r3, r0
 8003eb4:	6563      	str	r3, [r4, #84]	; 0x54
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	4a02      	ldr	r2, [pc, #8]	; (8003ec4 <__sread+0x24>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	e7f9      	b.n	8003eb6 <__sread+0x16>
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	ffffefff 	.word	0xffffefff

08003ec8 <__swrite>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	001f      	movs	r7, r3
 8003ecc:	898b      	ldrh	r3, [r1, #12]
 8003ece:	0005      	movs	r5, r0
 8003ed0:	000c      	movs	r4, r1
 8003ed2:	0016      	movs	r6, r2
 8003ed4:	05db      	lsls	r3, r3, #23
 8003ed6:	d505      	bpl.n	8003ee4 <__swrite+0x1c>
 8003ed8:	230e      	movs	r3, #14
 8003eda:	5ec9      	ldrsh	r1, [r1, r3]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2302      	movs	r3, #2
 8003ee0:	f000 f874 	bl	8003fcc <_lseek_r>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <__swrite+0x34>)
 8003ee8:	0028      	movs	r0, r5
 8003eea:	4013      	ands	r3, r2
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	0032      	movs	r2, r6
 8003ef0:	230e      	movs	r3, #14
 8003ef2:	5ee1      	ldrsh	r1, [r4, r3]
 8003ef4:	003b      	movs	r3, r7
 8003ef6:	f000 f81f 	bl	8003f38 <_write_r>
 8003efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efc:	ffffefff 	.word	0xffffefff

08003f00 <__sseek>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	000c      	movs	r4, r1
 8003f04:	250e      	movs	r5, #14
 8003f06:	5f49      	ldrsh	r1, [r1, r5]
 8003f08:	f000 f860 	bl	8003fcc <_lseek_r>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	1c42      	adds	r2, r0, #1
 8003f10:	d103      	bne.n	8003f1a <__sseek+0x1a>
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <__sseek+0x28>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	0152      	lsls	r2, r2, #5
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	6560      	str	r0, [r4, #84]	; 0x54
 8003f24:	e7f8      	b.n	8003f18 <__sseek+0x18>
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	ffffefff 	.word	0xffffefff

08003f2c <__sclose>:
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	230e      	movs	r3, #14
 8003f30:	5ec9      	ldrsh	r1, [r1, r3]
 8003f32:	f000 f815 	bl	8003f60 <_close_r>
 8003f36:	bd10      	pop	{r4, pc}

08003f38 <_write_r>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	0005      	movs	r5, r0
 8003f3c:	0008      	movs	r0, r1
 8003f3e:	0011      	movs	r1, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	4c06      	ldr	r4, [pc, #24]	; (8003f5c <_write_r+0x24>)
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	001a      	movs	r2, r3
 8003f48:	f7fd fc18 	bl	800177c <_write>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d103      	bne.n	8003f58 <_write_r+0x20>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d000      	beq.n	8003f58 <_write_r+0x20>
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	200001d0 	.word	0x200001d0

08003f60 <_close_r>:
 8003f60:	2300      	movs	r3, #0
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	4c06      	ldr	r4, [pc, #24]	; (8003f80 <_close_r+0x20>)
 8003f66:	0005      	movs	r5, r0
 8003f68:	0008      	movs	r0, r1
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	f7fd fc22 	bl	80017b4 <_close>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d103      	bne.n	8003f7c <_close_r+0x1c>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d000      	beq.n	8003f7c <_close_r+0x1c>
 8003f7a:	602b      	str	r3, [r5, #0]
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	200001d0 	.word	0x200001d0

08003f84 <_fstat_r>:
 8003f84:	2300      	movs	r3, #0
 8003f86:	b570      	push	{r4, r5, r6, lr}
 8003f88:	4c06      	ldr	r4, [pc, #24]	; (8003fa4 <_fstat_r+0x20>)
 8003f8a:	0005      	movs	r5, r0
 8003f8c:	0008      	movs	r0, r1
 8003f8e:	0011      	movs	r1, r2
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	f7fd fc19 	bl	80017c8 <_fstat>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	d103      	bne.n	8003fa2 <_fstat_r+0x1e>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d000      	beq.n	8003fa2 <_fstat_r+0x1e>
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	200001d0 	.word	0x200001d0

08003fa8 <_isatty_r>:
 8003fa8:	2300      	movs	r3, #0
 8003faa:	b570      	push	{r4, r5, r6, lr}
 8003fac:	4c06      	ldr	r4, [pc, #24]	; (8003fc8 <_isatty_r+0x20>)
 8003fae:	0005      	movs	r5, r0
 8003fb0:	0008      	movs	r0, r1
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	f7fd fc16 	bl	80017e4 <_isatty>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d103      	bne.n	8003fc4 <_isatty_r+0x1c>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d000      	beq.n	8003fc4 <_isatty_r+0x1c>
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	200001d0 	.word	0x200001d0

08003fcc <_lseek_r>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	0005      	movs	r5, r0
 8003fd0:	0008      	movs	r0, r1
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4c06      	ldr	r4, [pc, #24]	; (8003ff0 <_lseek_r+0x24>)
 8003fd8:	6022      	str	r2, [r4, #0]
 8003fda:	001a      	movs	r2, r3
 8003fdc:	f7fd fc0b 	bl	80017f6 <_lseek>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d103      	bne.n	8003fec <_lseek_r+0x20>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d000      	beq.n	8003fec <_lseek_r+0x20>
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	200001d0 	.word	0x200001d0

08003ff4 <_read_r>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	0005      	movs	r5, r0
 8003ff8:	0008      	movs	r0, r1
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4c06      	ldr	r4, [pc, #24]	; (8004018 <_read_r+0x24>)
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	001a      	movs	r2, r3
 8004004:	f7fd fb9d 	bl	8001742 <_read>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d103      	bne.n	8004014 <_read_r+0x20>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d000      	beq.n	8004014 <_read_r+0x20>
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	200001d0 	.word	0x200001d0

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
